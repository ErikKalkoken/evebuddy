// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: skillqueueitems.sql

package queries

import (
	"context"
	"database/sql"
)

const createSkillqueueItem = `-- name: CreateSkillqueueItem :exec
INSERT INTO skillqueue_items (
    eve_type_id,
    finish_date,
    finished_level,
    level_end_sp,
    level_start_sp,
    queue_position,
    my_character_id,
    start_date,
    training_start_sp
)
VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateSkillqueueItemParams struct {
	EveTypeID       int64
	FinishDate      sql.NullTime
	FinishedLevel   int64
	LevelEndSp      sql.NullInt64
	LevelStartSp    sql.NullInt64
	QueuePosition   int64
	MyCharacterID   int64
	StartDate       sql.NullTime
	TrainingStartSp sql.NullInt64
}

func (q *Queries) CreateSkillqueueItem(ctx context.Context, arg CreateSkillqueueItemParams) error {
	_, err := q.db.ExecContext(ctx, createSkillqueueItem,
		arg.EveTypeID,
		arg.FinishDate,
		arg.FinishedLevel,
		arg.LevelEndSp,
		arg.LevelStartSp,
		arg.QueuePosition,
		arg.MyCharacterID,
		arg.StartDate,
		arg.TrainingStartSp,
	)
	return err
}

const deleteSkillqueueItems = `-- name: DeleteSkillqueueItems :exec
DELETE FROM skillqueue_items
WHERE my_character_id = ?
`

func (q *Queries) DeleteSkillqueueItems(ctx context.Context, myCharacterID int64) error {
	_, err := q.db.ExecContext(ctx, deleteSkillqueueItems, myCharacterID)
	return err
}

const getSkillqueueItem = `-- name: GetSkillqueueItem :one
SELECT eve_type_id, finish_date, finished_level, level_end_sp, level_start_sp, queue_position, my_character_id, start_date, training_start_sp
FROM skillqueue_items
WHERE my_character_id = ? and eve_type_id = ?
`

type GetSkillqueueItemParams struct {
	MyCharacterID int64
	EveTypeID     int64
}

func (q *Queries) GetSkillqueueItem(ctx context.Context, arg GetSkillqueueItemParams) (SkillqueueItem, error) {
	row := q.db.QueryRowContext(ctx, getSkillqueueItem, arg.MyCharacterID, arg.EveTypeID)
	var i SkillqueueItem
	err := row.Scan(
		&i.EveTypeID,
		&i.FinishDate,
		&i.FinishedLevel,
		&i.LevelEndSp,
		&i.LevelStartSp,
		&i.QueuePosition,
		&i.MyCharacterID,
		&i.StartDate,
		&i.TrainingStartSp,
	)
	return i, err
}

const listSkillqueueItems = `-- name: ListSkillqueueItems :many
SELECT eve_type_id, finish_date, finished_level, level_end_sp, level_start_sp, queue_position, my_character_id, start_date, training_start_sp
FROM skillqueue_items
WHERE my_character_id = ?
`

func (q *Queries) ListSkillqueueItems(ctx context.Context, myCharacterID int64) ([]SkillqueueItem, error) {
	rows, err := q.db.QueryContext(ctx, listSkillqueueItems, myCharacterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SkillqueueItem
	for rows.Next() {
		var i SkillqueueItem
		if err := rows.Scan(
			&i.EveTypeID,
			&i.FinishDate,
			&i.FinishedLevel,
			&i.LevelEndSp,
			&i.LevelStartSp,
			&i.QueuePosition,
			&i.MyCharacterID,
			&i.StartDate,
			&i.TrainingStartSp,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
