// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: character_jump_clones.sql

package queries

import (
	"context"
	"database/sql"
)

const createCharacterJumpClone = `-- name: CreateCharacterJumpClone :one
INSERT INTO character_jump_clones (
    character_id,
    jump_clone_id,
    location_id,
    name
)
VALUES (
    ?, ?, ?, ?
)
RETURNING id
`

type CreateCharacterJumpCloneParams struct {
	CharacterID int64
	JumpCloneID int64
	LocationID  int64
	Name        string
}

func (q *Queries) CreateCharacterJumpClone(ctx context.Context, arg CreateCharacterJumpCloneParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createCharacterJumpClone,
		arg.CharacterID,
		arg.JumpCloneID,
		arg.LocationID,
		arg.Name,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createCharacterJumpCloneImplant = `-- name: CreateCharacterJumpCloneImplant :exec
INSERT INTO character_jump_clone_implants (
    clone_id,
    eve_type_id
)
VALUES (
    ?, ?
)
`

type CreateCharacterJumpCloneImplantParams struct {
	CloneID   int64
	EveTypeID int64
}

func (q *Queries) CreateCharacterJumpCloneImplant(ctx context.Context, arg CreateCharacterJumpCloneImplantParams) error {
	_, err := q.db.ExecContext(ctx, createCharacterJumpCloneImplant, arg.CloneID, arg.EveTypeID)
	return err
}

const deleteCharacterJumpClones = `-- name: DeleteCharacterJumpClones :exec
DELETE FROM character_jump_clones
WHERE character_id = ?
`

func (q *Queries) DeleteCharacterJumpClones(ctx context.Context, characterID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCharacterJumpClones, characterID)
	return err
}

const getCharacterJumpClone = `-- name: GetCharacterJumpClone :one
SELECT character_jump_clones.id, character_jump_clones.character_id, character_jump_clones.jump_clone_id, character_jump_clones.location_id, character_jump_clones.name, locations.name as location_name, eve_regions.id as region_id, eve_regions.name as region_name
FROM character_jump_clones
JOIN locations ON locations.id = character_jump_clones.location_id
LEFT JOIN eve_solar_systems ON eve_solar_systems.id = locations.eve_solar_system_id
LEFT JOIN eve_constellations ON eve_constellations.id = eve_solar_systems.eve_constellation_id
LEFT JOIN eve_regions ON eve_regions.id = eve_constellations.eve_region_id
WHERE character_id = ?
AND jump_clone_id = ?
`

type GetCharacterJumpCloneParams struct {
	CharacterID int64
	JumpCloneID int64
}

type GetCharacterJumpCloneRow struct {
	CharacterJumpClone CharacterJumpClone
	LocationName       string
	RegionID           sql.NullInt64
	RegionName         sql.NullString
}

func (q *Queries) GetCharacterJumpClone(ctx context.Context, arg GetCharacterJumpCloneParams) (GetCharacterJumpCloneRow, error) {
	row := q.db.QueryRowContext(ctx, getCharacterJumpClone, arg.CharacterID, arg.JumpCloneID)
	var i GetCharacterJumpCloneRow
	err := row.Scan(
		&i.CharacterJumpClone.ID,
		&i.CharacterJumpClone.CharacterID,
		&i.CharacterJumpClone.JumpCloneID,
		&i.CharacterJumpClone.LocationID,
		&i.CharacterJumpClone.Name,
		&i.LocationName,
		&i.RegionID,
		&i.RegionName,
	)
	return i, err
}

const listCharacterJumpCloneImplant = `-- name: ListCharacterJumpCloneImplant :many
SELECT DISTINCT
    character_jump_clone_implants.id, character_jump_clone_implants.clone_id, character_jump_clone_implants.eve_type_id,
    eve_types.id, eve_types.description, eve_types.eve_group_id, eve_types.name, eve_types.is_published,
    eve_groups.id, eve_groups.eve_category_id, eve_groups.name, eve_groups.is_published,
    eve_categories.id, eve_categories.name, eve_categories.is_published,
    eve_type_dogma_attributes.value as slot_num
FROM character_jump_clone_implants
JOIN eve_types ON eve_types.id = character_jump_clone_implants.eve_type_id
JOIN eve_groups ON eve_groups.id = eve_types.eve_group_id
JOIN eve_categories ON eve_categories.id = eve_groups.eve_category_id
LEFT JOIN eve_type_dogma_attributes ON eve_type_dogma_attributes.eve_type_id = character_jump_clone_implants.eve_type_id AND eve_type_dogma_attributes.dogma_attribute_id = ?
WHERE clone_id = ?
ORDER BY slot_num
`

type ListCharacterJumpCloneImplantParams struct {
	DogmaAttributeID int64
	CloneID          int64
}

type ListCharacterJumpCloneImplantRow struct {
	CharacterJumpCloneImplant CharacterJumpCloneImplant
	EveType                   EveType
	EveGroup                  EveGroup
	EveCategory               EveCategory
	SlotNum                   sql.NullFloat64
}

func (q *Queries) ListCharacterJumpCloneImplant(ctx context.Context, arg ListCharacterJumpCloneImplantParams) ([]ListCharacterJumpCloneImplantRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterJumpCloneImplant, arg.DogmaAttributeID, arg.CloneID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterJumpCloneImplantRow
	for rows.Next() {
		var i ListCharacterJumpCloneImplantRow
		if err := rows.Scan(
			&i.CharacterJumpCloneImplant.ID,
			&i.CharacterJumpCloneImplant.CloneID,
			&i.CharacterJumpCloneImplant.EveTypeID,
			&i.EveType.ID,
			&i.EveType.Description,
			&i.EveType.EveGroupID,
			&i.EveType.Name,
			&i.EveType.IsPublished,
			&i.EveGroup.ID,
			&i.EveGroup.EveCategoryID,
			&i.EveGroup.Name,
			&i.EveGroup.IsPublished,
			&i.EveCategory.ID,
			&i.EveCategory.Name,
			&i.EveCategory.IsPublished,
			&i.SlotNum,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterJumpClones = `-- name: ListCharacterJumpClones :many
SELECT DISTINCT
    character_jump_clones.id, character_jump_clones.character_id, character_jump_clones.jump_clone_id, character_jump_clones.location_id, character_jump_clones.name,
    locations.name as location_name,
    eve_regions.id as region_id,
    eve_regions.name as region_name,
    (
        SELECT COUNT(*)
        FROM character_jump_clone_implants
        WHERE clone_id = character_jump_clones.id
    ) AS implants_count
FROM character_jump_clones
JOIN locations ON locations.id = character_jump_clones.location_id
LEFT JOIN character_jump_clone_implants ON character_jump_clone_implants.clone_id = character_jump_clones.id
LEFT JOIN eve_solar_systems ON eve_solar_systems.id = locations.eve_solar_system_id
LEFT JOIN eve_constellations ON eve_constellations.id = eve_solar_systems.eve_constellation_id
LEFT JOIN eve_regions ON eve_regions.id = eve_constellations.eve_region_id
WHERE character_id = ?
ORDER BY location_name, implants_count DESC
`

type ListCharacterJumpClonesRow struct {
	CharacterJumpClone CharacterJumpClone
	LocationName       string
	RegionID           sql.NullInt64
	RegionName         sql.NullString
	ImplantsCount      int64
}

func (q *Queries) ListCharacterJumpClones(ctx context.Context, characterID int64) ([]ListCharacterJumpClonesRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterJumpClones, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterJumpClonesRow
	for rows.Next() {
		var i ListCharacterJumpClonesRow
		if err := rows.Scan(
			&i.CharacterJumpClone.ID,
			&i.CharacterJumpClone.CharacterID,
			&i.CharacterJumpClone.JumpCloneID,
			&i.CharacterJumpClone.LocationID,
			&i.CharacterJumpClone.Name,
			&i.LocationName,
			&i.RegionID,
			&i.RegionName,
			&i.ImplantsCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
