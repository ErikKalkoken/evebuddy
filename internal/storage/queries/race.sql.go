// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: race.sql

package queries

import (
	"context"
)

const createRace = `-- name: CreateRace :one
INSERT INTO races (
    id,
    description,
    name
)
VALUES (
    ?, ?, ?
)
RETURNING id, description, name
`

type CreateRaceParams struct {
	ID          int64
	Description string
	Name        string
}

func (q *Queries) CreateRace(ctx context.Context, arg CreateRaceParams) (Race, error) {
	row := q.db.QueryRowContext(ctx, createRace, arg.ID, arg.Description, arg.Name)
	var i Race
	err := row.Scan(&i.ID, &i.Description, &i.Name)
	return i, err
}

const getRace = `-- name: GetRace :one
SELECT id, description, name
FROM races
WHERE id = ?
`

func (q *Queries) GetRace(ctx context.Context, id int64) (Race, error) {
	row := q.db.QueryRowContext(ctx, getRace, id)
	var i Race
	err := row.Scan(&i.ID, &i.Description, &i.Name)
	return i, err
}

const listRaceIDs = `-- name: ListRaceIDs :many
SELECT id
FROM races
`

func (q *Queries) ListRaceIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listRaceIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
