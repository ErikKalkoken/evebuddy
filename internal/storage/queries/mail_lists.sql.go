// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: mail_lists.sql

package queries

import (
	"context"
)

const createMailList = `-- name: CreateMailList :exec
INSERT OR IGNORE INTO mail_lists (
    my_character_id,
    eve_entity_id
)
VALUES (
    ?, ?
)
`

type CreateMailListParams struct {
	MyCharacterID int64
	EveEntityID   int64
}

func (q *Queries) CreateMailList(ctx context.Context, arg CreateMailListParams) error {
	_, err := q.db.ExecContext(ctx, createMailList, arg.MyCharacterID, arg.EveEntityID)
	return err
}

const deleteObsoleteMailLists = `-- name: DeleteObsoleteMailLists :exec
DELETE FROM mail_lists
WHERE mail_lists.my_character_id = ?
AND eve_entity_id NOT IN (
    SELECT eve_entity_id
    FROM mail_recipients
    JOIN mails ON mails.id = mail_recipients.mail_id
    WHERE mails.my_character_id = ?
)
AND eve_entity_id NOT IN (
    SELECT from_id
    FROM mails
    WHERE mails.my_character_id = ?
)
`

type DeleteObsoleteMailListsParams struct {
	MyCharacterID   int64
	MyCharacterID_2 int64
	MyCharacterID_3 int64
}

func (q *Queries) DeleteObsoleteMailLists(ctx context.Context, arg DeleteObsoleteMailListsParams) error {
	_, err := q.db.ExecContext(ctx, deleteObsoleteMailLists, arg.MyCharacterID, arg.MyCharacterID_2, arg.MyCharacterID_3)
	return err
}

const getMailList = `-- name: GetMailList :one
SELECT my_character_id, eve_entity_id
FROM mail_lists
WHERE my_character_id = ? AND eve_entity_id = ?
`

type GetMailListParams struct {
	MyCharacterID int64
	EveEntityID   int64
}

func (q *Queries) GetMailList(ctx context.Context, arg GetMailListParams) (MailList, error) {
	row := q.db.QueryRowContext(ctx, getMailList, arg.MyCharacterID, arg.EveEntityID)
	var i MailList
	err := row.Scan(&i.MyCharacterID, &i.EveEntityID)
	return i, err
}

const listMailListsOrdered = `-- name: ListMailListsOrdered :many
SELECT eve_entities.id, eve_entities.category, eve_entities.name
FROM mail_lists
JOIN eve_entities ON eve_entities.id = mail_lists.eve_entity_id
WHERE my_character_id = ?
ORDER by eve_entities.name
`

func (q *Queries) ListMailListsOrdered(ctx context.Context, myCharacterID int64) ([]EveEntity, error) {
	rows, err := q.db.QueryContext(ctx, listMailListsOrdered, myCharacterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EveEntity
	for rows.Next() {
		var i EveEntity
		if err := rows.Scan(&i.ID, &i.Category, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
