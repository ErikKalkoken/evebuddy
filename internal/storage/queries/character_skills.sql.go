// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: character_skills.sql

package queries

import (
	"context"
	"database/sql"
	"strings"
)

const deleteExcludedCharacterSkills = `-- name: DeleteExcludedCharacterSkills :exec
DELETE FROM character_skills
WHERE character_id = ?
AND eve_type_id NOT IN (/*SLICE:eve_type_ids*/?)
`

type DeleteExcludedCharacterSkillsParams struct {
	CharacterID int64
	EveTypeIds  []int64
}

func (q *Queries) DeleteExcludedCharacterSkills(ctx context.Context, arg DeleteExcludedCharacterSkillsParams) error {
	query := deleteExcludedCharacterSkills
	var queryParams []interface{}
	queryParams = append(queryParams, arg.CharacterID)
	if len(arg.EveTypeIds) > 0 {
		for _, v := range arg.EveTypeIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:eve_type_ids*/?", strings.Repeat(",?", len(arg.EveTypeIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:eve_type_ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getCharacterSkill = `-- name: GetCharacterSkill :one
SELECT
    character_skills.id, character_skills.active_skill_level, character_skills.character_id, character_skills.eve_type_id, character_skills.skill_points_in_skill, character_skills.trained_skill_level,
    eve_types.id, eve_types.eve_group_id, eve_types.capacity, eve_types.description, eve_types.graphic_id, eve_types.icon_id, eve_types.is_published, eve_types.market_group_id, eve_types.mass, eve_types.name, eve_types.packaged_volume, eve_types.portion_size, eve_types.radius, eve_types.volume,
    eve_groups.id, eve_groups.eve_category_id, eve_groups.name, eve_groups.is_published,
    eve_categories.id, eve_categories.name, eve_categories.is_published
FROM character_skills
JOIN eve_types ON eve_types.id = character_skills.eve_type_id
JOIN eve_groups ON eve_groups.id = eve_types.eve_group_id
JOIN eve_categories ON eve_categories.id = eve_groups.eve_category_id
WHERE character_id = ?
AND eve_type_id = ?
`

type GetCharacterSkillParams struct {
	CharacterID int64
	EveTypeID   int64
}

type GetCharacterSkillRow struct {
	CharacterSkill CharacterSkill
	EveType        EveType
	EveGroup       EveGroup
	EveCategory    EveCategory
}

func (q *Queries) GetCharacterSkill(ctx context.Context, arg GetCharacterSkillParams) (GetCharacterSkillRow, error) {
	row := q.db.QueryRowContext(ctx, getCharacterSkill, arg.CharacterID, arg.EveTypeID)
	var i GetCharacterSkillRow
	err := row.Scan(
		&i.CharacterSkill.ID,
		&i.CharacterSkill.ActiveSkillLevel,
		&i.CharacterSkill.CharacterID,
		&i.CharacterSkill.EveTypeID,
		&i.CharacterSkill.SkillPointsInSkill,
		&i.CharacterSkill.TrainedSkillLevel,
		&i.EveType.ID,
		&i.EveType.EveGroupID,
		&i.EveType.Capacity,
		&i.EveType.Description,
		&i.EveType.GraphicID,
		&i.EveType.IconID,
		&i.EveType.IsPublished,
		&i.EveType.MarketGroupID,
		&i.EveType.Mass,
		&i.EveType.Name,
		&i.EveType.PackagedVolume,
		&i.EveType.PortionSize,
		&i.EveType.Radius,
		&i.EveType.Volume,
		&i.EveGroup.ID,
		&i.EveGroup.EveCategoryID,
		&i.EveGroup.Name,
		&i.EveGroup.IsPublished,
		&i.EveCategory.ID,
		&i.EveCategory.Name,
		&i.EveCategory.IsPublished,
	)
	return i, err
}

const listCharacterSkillGroupsProgress = `-- name: ListCharacterSkillGroupsProgress :many
SELECT
    eve_groups.id as eve_group_id,
    eve_groups.name as eve_group_name,
    COUNT(eve_types.id) as total,
    SUM(character_skills.trained_skill_level / 5.0) AS trained
FROM eve_types
JOIN eve_groups ON eve_groups.id = eve_types.eve_group_id AND eve_groups.is_published IS TRUE
LEFT JOIN character_skills ON character_skills.eve_type_id = eve_types.id AND character_skills.character_id = ?
WHERE eve_groups.eve_category_id = ?
AND eve_types.is_published IS TRUE
GROUP BY eve_groups.name
ORDER BY eve_groups.name
`

type ListCharacterSkillGroupsProgressParams struct {
	CharacterID   int64
	EveCategoryID int64
}

type ListCharacterSkillGroupsProgressRow struct {
	EveGroupID   int64
	EveGroupName string
	Total        int64
	Trained      sql.NullFloat64
}

func (q *Queries) ListCharacterSkillGroupsProgress(ctx context.Context, arg ListCharacterSkillGroupsProgressParams) ([]ListCharacterSkillGroupsProgressRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterSkillGroupsProgress, arg.CharacterID, arg.EveCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterSkillGroupsProgressRow
	for rows.Next() {
		var i ListCharacterSkillGroupsProgressRow
		if err := rows.Scan(
			&i.EveGroupID,
			&i.EveGroupName,
			&i.Total,
			&i.Trained,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterSkillProgress = `-- name: ListCharacterSkillProgress :many
SELECT
    eve_types.id,
    eve_types.name,
    eve_types.description,
    character_skills.active_skill_level,
    character_skills.trained_skill_level
FROM eve_types
LEFT JOIN character_skills ON character_skills.eve_type_id = eve_types.id AND character_skills.character_id = ?
WHERE eve_types.eve_group_id = ?
AND eve_types.is_published IS TRUE
ORDER BY eve_types.name
`

type ListCharacterSkillProgressParams struct {
	CharacterID int64
	EveGroupID  int64
}

type ListCharacterSkillProgressRow struct {
	ID                int64
	Name              string
	Description       string
	ActiveSkillLevel  sql.NullInt64
	TrainedSkillLevel sql.NullInt64
}

func (q *Queries) ListCharacterSkillProgress(ctx context.Context, arg ListCharacterSkillProgressParams) ([]ListCharacterSkillProgressRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterSkillProgress, arg.CharacterID, arg.EveGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterSkillProgressRow
	for rows.Next() {
		var i ListCharacterSkillProgressRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ActiveSkillLevel,
			&i.TrainedSkillLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateCharacterSkill = `-- name: UpdateOrCreateCharacterSkill :exec
INSERT INTO character_skills (
    character_id,
    eve_type_id,
    active_skill_level,
    skill_points_in_skill,
    trained_skill_level
)
VALUES (
    ?1, ?2, ?3, ?4, ?5
)
ON CONFLICT(character_id, eve_type_id) DO
UPDATE SET
    active_skill_level = ?3,
    skill_points_in_skill = ?4,
    trained_skill_level = ?5
WHERE character_id = ?1
AND eve_type_id = ?2
`

type UpdateOrCreateCharacterSkillParams struct {
	CharacterID        int64
	EveTypeID          int64
	ActiveSkillLevel   int64
	SkillPointsInSkill int64
	TrainedSkillLevel  int64
}

func (q *Queries) UpdateOrCreateCharacterSkill(ctx context.Context, arg UpdateOrCreateCharacterSkillParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateCharacterSkill,
		arg.CharacterID,
		arg.EveTypeID,
		arg.ActiveSkillLevel,
		arg.SkillPointsInSkill,
		arg.TrainedSkillLevel,
	)
	return err
}
