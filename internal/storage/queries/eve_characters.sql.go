// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: eve_characters.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createEveCharacter = `-- name: CreateEveCharacter :exec
INSERT INTO eve_characters (
    id,
    alliance_id,
    birthday,
    corporation_id,
    description,
    faction_id,
    gender,
    name,
    race_id,
    security_status
)
VALUES (
    ?, ?, ?, ?, ? ,?, ?, ?, ?, ?
)
`

type CreateEveCharacterParams struct {
	ID             int64
	AllianceID     sql.NullInt64
	Birthday       time.Time
	CorporationID  int64
	Description    string
	FactionID      sql.NullInt64
	Gender         string
	Name           string
	RaceID         int64
	SecurityStatus float64
}

func (q *Queries) CreateEveCharacter(ctx context.Context, arg CreateEveCharacterParams) error {
	_, err := q.db.ExecContext(ctx, createEveCharacter,
		arg.ID,
		arg.AllianceID,
		arg.Birthday,
		arg.CorporationID,
		arg.Description,
		arg.FactionID,
		arg.Gender,
		arg.Name,
		arg.RaceID,
		arg.SecurityStatus,
	)
	return err
}

const deleteEveCharacter = `-- name: DeleteEveCharacter :exec
DELETE FROM eve_characters
WHERE id = ?
`

func (q *Queries) DeleteEveCharacter(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEveCharacter, id)
	return err
}

const getEveCharacter = `-- name: GetEveCharacter :one
SELECT
    eve_characters.alliance_id, eve_characters.birthday, eve_characters.corporation_id, eve_characters.description, eve_characters.gender, eve_characters.faction_id, eve_characters.id, eve_characters.name, eve_characters.race_id, eve_characters.security_status,
    corporations.id, corporations.category, corporations.name,
    eve_races.id, eve_races.description, eve_races.name,
    eve_character_alliances.id, eve_character_alliances.category, eve_character_alliances.name,
    eve_character_factions.id, eve_character_factions.category, eve_character_factions.name
FROM eve_characters
JOIN eve_entities AS corporations ON corporations.id = eve_characters.corporation_id
JOIN eve_races ON eve_races.id = eve_characters.race_id
LEFT JOIN eve_character_alliances ON eve_character_alliances.id = eve_characters.alliance_id
LEFT JOIN eve_character_factions ON eve_character_factions.id = eve_characters.faction_id
WHERE eve_characters.id = ?
`

type GetEveCharacterRow struct {
	EveCharacter         EveCharacter
	EveEntity            EveEntity
	EveRace              EveRace
	EveCharacterAlliance EveCharacterAlliance
	EveCharacterFaction  EveCharacterFaction
}

func (q *Queries) GetEveCharacter(ctx context.Context, id int64) (GetEveCharacterRow, error) {
	row := q.db.QueryRowContext(ctx, getEveCharacter, id)
	var i GetEveCharacterRow
	err := row.Scan(
		&i.EveCharacter.AllianceID,
		&i.EveCharacter.Birthday,
		&i.EveCharacter.CorporationID,
		&i.EveCharacter.Description,
		&i.EveCharacter.Gender,
		&i.EveCharacter.FactionID,
		&i.EveCharacter.ID,
		&i.EveCharacter.Name,
		&i.EveCharacter.RaceID,
		&i.EveCharacter.SecurityStatus,
		&i.EveEntity.ID,
		&i.EveEntity.Category,
		&i.EveEntity.Name,
		&i.EveRace.ID,
		&i.EveRace.Description,
		&i.EveRace.Name,
		&i.EveCharacterAlliance.ID,
		&i.EveCharacterAlliance.Category,
		&i.EveCharacterAlliance.Name,
		&i.EveCharacterFaction.ID,
		&i.EveCharacterFaction.Category,
		&i.EveCharacterFaction.Name,
	)
	return i, err
}

const updateOrCreateEveCharacter = `-- name: UpdateOrCreateEveCharacter :one
INSERT INTO eve_characters (
    id,
    alliance_id,
    birthday,
    corporation_id,
    description,
    faction_id,
    gender,
    name,
    race_id,
    security_status
)
VALUES (
    ?1, ?2, ?3, ?4, ?5 ,?6, ?7, ?8, ?9, ?10
)
ON CONFLICT(id) DO
UPDATE SET
    alliance_id = ?2,
    corporation_id = ?4,
    description = ?5,
    faction_id = ?6,
    name = ?8,
    security_status = ?10
WHERE id = ?1
RETURNING alliance_id, birthday, corporation_id, description, gender, faction_id, id, name, race_id, security_status
`

type UpdateOrCreateEveCharacterParams struct {
	ID             int64
	AllianceID     sql.NullInt64
	Birthday       time.Time
	CorporationID  int64
	Description    string
	FactionID      sql.NullInt64
	Gender         string
	Name           string
	RaceID         int64
	SecurityStatus float64
}

func (q *Queries) UpdateOrCreateEveCharacter(ctx context.Context, arg UpdateOrCreateEveCharacterParams) (EveCharacter, error) {
	row := q.db.QueryRowContext(ctx, updateOrCreateEveCharacter,
		arg.ID,
		arg.AllianceID,
		arg.Birthday,
		arg.CorporationID,
		arg.Description,
		arg.FactionID,
		arg.Gender,
		arg.Name,
		arg.RaceID,
		arg.SecurityStatus,
	)
	var i EveCharacter
	err := row.Scan(
		&i.AllianceID,
		&i.Birthday,
		&i.CorporationID,
		&i.Description,
		&i.Gender,
		&i.FactionID,
		&i.ID,
		&i.Name,
		&i.RaceID,
		&i.SecurityStatus,
	)
	return i, err
}
