// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: character_update_status.sql

package queries

import (
	"context"
	"database/sql"
)

const getCharacterUpdateStatus = `-- name: GetCharacterUpdateStatus :one
SELECT id, character_id, content_hash, completed_at, error, section_id, started_at
FROM character_update_status
WHERE character_id = ?
AND section_id = ?
`

type GetCharacterUpdateStatusParams struct {
	CharacterID int64
	SectionID   string
}

func (q *Queries) GetCharacterUpdateStatus(ctx context.Context, arg GetCharacterUpdateStatusParams) (CharacterUpdateStatus, error) {
	row := q.db.QueryRowContext(ctx, getCharacterUpdateStatus, arg.CharacterID, arg.SectionID)
	var i CharacterUpdateStatus
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.ContentHash,
		&i.CompletedAt,
		&i.Error,
		&i.SectionID,
		&i.StartedAt,
	)
	return i, err
}

const listCharacterUpdateStatus = `-- name: ListCharacterUpdateStatus :many
SELECT id, character_id, content_hash, completed_at, error, section_id, started_at
FROM character_update_status
WHERE character_id = ?
`

func (q *Queries) ListCharacterUpdateStatus(ctx context.Context, characterID int64) ([]CharacterUpdateStatus, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterUpdateStatus, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterUpdateStatus
	for rows.Next() {
		var i CharacterUpdateStatus
		if err := rows.Scan(
			&i.ID,
			&i.CharacterID,
			&i.ContentHash,
			&i.CompletedAt,
			&i.Error,
			&i.SectionID,
			&i.StartedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setCharacterUpdateStatus = `-- name: SetCharacterUpdateStatus :exec
INSERT INTO character_update_status (
    character_id,
    section_id,
    content_hash,
    error
)
VALUES (
    ?1, ?2, "", ?3
)
ON CONFLICT(character_id, section_id) DO
UPDATE SET
    error = ?3
WHERE character_id = ?1
AND section_id = ?2
`

type SetCharacterUpdateStatusParams struct {
	CharacterID int64
	SectionID   string
	Error       string
}

func (q *Queries) SetCharacterUpdateStatus(ctx context.Context, arg SetCharacterUpdateStatusParams) error {
	_, err := q.db.ExecContext(ctx, setCharacterUpdateStatus, arg.CharacterID, arg.SectionID, arg.Error)
	return err
}

const updateOrCreateCharacterUpdateStatus = `-- name: UpdateOrCreateCharacterUpdateStatus :exec
INSERT INTO character_update_status (
    character_id,
    section_id,
    completed_at,
    content_hash,
    error,
    started_at
)
VALUES (
    ?1, ?2, ?3, ?4, ?5, ?6
)
ON CONFLICT(character_id, section_id) DO
UPDATE SET
    completed_at = ?3,
    content_hash = ?4,
    error = ?5,
    started_at = ?6
WHERE character_id = ?1
AND section_id = ?2
`

type UpdateOrCreateCharacterUpdateStatusParams struct {
	CharacterID int64
	SectionID   string
	CompletedAt sql.NullTime
	ContentHash string
	Error       string
	StartedAt   sql.NullTime
}

func (q *Queries) UpdateOrCreateCharacterUpdateStatus(ctx context.Context, arg UpdateOrCreateCharacterUpdateStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateCharacterUpdateStatus,
		arg.CharacterID,
		arg.SectionID,
		arg.CompletedAt,
		arg.ContentHash,
		arg.Error,
		arg.StartedAt,
	)
	return err
}
