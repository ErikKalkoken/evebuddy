// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: structures.sql

package queries

import (
	"context"
	"database/sql"
)

const createStructure = `-- name: CreateStructure :exec
INSERT INTO structures (
    id,
    eve_solar_system_id,
    eve_type_id,
    name,
    owner_id,
    position_x,
    position_y,
    position_z
)
VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateStructureParams struct {
	ID               int64
	EveSolarSystemID int64
	EveTypeID        sql.NullInt64
	Name             string
	OwnerID          int64
	PositionX        float64
	PositionY        float64
	PositionZ        float64
}

func (q *Queries) CreateStructure(ctx context.Context, arg CreateStructureParams) error {
	_, err := q.db.ExecContext(ctx, createStructure,
		arg.ID,
		arg.EveSolarSystemID,
		arg.EveTypeID,
		arg.Name,
		arg.OwnerID,
		arg.PositionX,
		arg.PositionY,
		arg.PositionZ,
	)
	return err
}

const getStructure = `-- name: GetStructure :one
SELECT
    structures.id, structures.eve_solar_system_id, structures.eve_type_id, structures.name, structures.owner_id, structures.position_x, structures.position_y, structures.position_z,
    owners.id, owners.category, owners.name,
    eve_solar_systems.id, eve_solar_systems.eve_constellation_id, eve_solar_systems.name, eve_solar_systems.security_status,
    eve_constellations.id, eve_constellations.eve_region_id, eve_constellations.name,
    eve_regions.id, eve_regions.description, eve_regions.name,
    eve_type_id
FROM structures
JOIN eve_entities AS owners ON owners.id = structures.owner_id
JOIN eve_solar_systems ON eve_solar_systems.id = structures.eve_solar_system_id
JOIN eve_constellations ON eve_constellations.id = eve_solar_systems.eve_constellation_id
JOIN eve_regions ON eve_regions.id = eve_constellations.eve_region_id
WHERE structures.id = ?
`

type GetStructureRow struct {
	Structure        Structure
	EveEntity        EveEntity
	EveSolarSystem   EveSolarSystem
	EveConstellation EveConstellation
	EveRegion        EveRegion
	EveTypeID        sql.NullInt64
}

func (q *Queries) GetStructure(ctx context.Context, id int64) (GetStructureRow, error) {
	row := q.db.QueryRowContext(ctx, getStructure, id)
	var i GetStructureRow
	err := row.Scan(
		&i.Structure.ID,
		&i.Structure.EveSolarSystemID,
		&i.Structure.EveTypeID,
		&i.Structure.Name,
		&i.Structure.OwnerID,
		&i.Structure.PositionX,
		&i.Structure.PositionY,
		&i.Structure.PositionZ,
		&i.EveEntity.ID,
		&i.EveEntity.Category,
		&i.EveEntity.Name,
		&i.EveSolarSystem.ID,
		&i.EveSolarSystem.EveConstellationID,
		&i.EveSolarSystem.Name,
		&i.EveSolarSystem.SecurityStatus,
		&i.EveConstellation.ID,
		&i.EveConstellation.EveRegionID,
		&i.EveConstellation.Name,
		&i.EveRegion.ID,
		&i.EveRegion.Description,
		&i.EveRegion.Name,
		&i.EveTypeID,
	)
	return i, err
}
