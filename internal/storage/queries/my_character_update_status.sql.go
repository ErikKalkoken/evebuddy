// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: my_character_update_status.sql

package queries

import (
	"context"
	"time"
)

const getMyCharacterUpdateStatus = `-- name: GetMyCharacterUpdateStatus :one
SELECT content_hash, my_character_id, section_id, updated_at
FROM my_character_update_status
WHERE my_character_id = ?
AND section_id = ?
`

type GetMyCharacterUpdateStatusParams struct {
	MyCharacterID int64
	SectionID     string
}

func (q *Queries) GetMyCharacterUpdateStatus(ctx context.Context, arg GetMyCharacterUpdateStatusParams) (MyCharacterUpdateStatus, error) {
	row := q.db.QueryRowContext(ctx, getMyCharacterUpdateStatus, arg.MyCharacterID, arg.SectionID)
	var i MyCharacterUpdateStatus
	err := row.Scan(
		&i.ContentHash,
		&i.MyCharacterID,
		&i.SectionID,
		&i.UpdatedAt,
	)
	return i, err
}

const updateOrCreateMyCharacterUpdateStatus = `-- name: UpdateOrCreateMyCharacterUpdateStatus :exec
INSERT INTO my_character_update_status (
    my_character_id,
    section_id,
    updated_at,
    content_hash
)
VALUES (
    ?1, ?2, ?3, ?4
)
ON CONFLICT(my_character_id, section_id) DO
UPDATE SET
    updated_at = ?3,
    content_hash = ?4
WHERE my_character_id = ?1
AND section_id = ?2
`

type UpdateOrCreateMyCharacterUpdateStatusParams struct {
	MyCharacterID int64
	SectionID     string
	UpdatedAt     time.Time
	ContentHash   string
}

func (q *Queries) UpdateOrCreateMyCharacterUpdateStatus(ctx context.Context, arg UpdateOrCreateMyCharacterUpdateStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateMyCharacterUpdateStatus,
		arg.MyCharacterID,
		arg.SectionID,
		arg.UpdatedAt,
		arg.ContentHash,
	)
	return err
}
