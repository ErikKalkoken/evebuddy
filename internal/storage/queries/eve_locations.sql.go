// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: eve_locations.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const getLocation = `-- name: GetLocation :one
SELECT id, eve_solar_system_id, eve_type_id, name, owner_id, updated_at
FROM eve_locations
WHERE id = ?
`

func (q *Queries) GetLocation(ctx context.Context, id int64) (EveLocation, error) {
	row := q.db.QueryRowContext(ctx, getLocation, id)
	var i EveLocation
	err := row.Scan(
		&i.ID,
		&i.EveSolarSystemID,
		&i.EveTypeID,
		&i.Name,
		&i.OwnerID,
		&i.UpdatedAt,
	)
	return i, err
}

const listEveLocations = `-- name: ListEveLocations :many
SELECT id, eve_solar_system_id, eve_type_id, name, owner_id, updated_at
FROM eve_locations
`

func (q *Queries) ListEveLocations(ctx context.Context) ([]EveLocation, error) {
	rows, err := q.db.QueryContext(ctx, listEveLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EveLocation
	for rows.Next() {
		var i EveLocation
		if err := rows.Scan(
			&i.ID,
			&i.EveSolarSystemID,
			&i.EveTypeID,
			&i.Name,
			&i.OwnerID,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLocationIDs = `-- name: ListLocationIDs :many
SELECT id
FROM eve_locations
`

func (q *Queries) ListLocationIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listLocationIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateLocation = `-- name: UpdateOrCreateLocation :exec
INSERT INTO eve_locations (
    id,
    eve_solar_system_id,
    eve_type_id,
    name,
    owner_id,
    updated_at
)
VALUES (
    ?1, ?2, ?3, ?4, ?5, ?6
)
ON CONFLICT(id) DO
UPDATE SET
    eve_solar_system_id = ?2,
    eve_type_id = ?3,
    name = ?4,
    owner_id = ?5,
    updated_at = ?6
WHERE id = ?1
`

type UpdateOrCreateLocationParams struct {
	ID               int64
	EveSolarSystemID sql.NullInt64
	EveTypeID        sql.NullInt64
	Name             string
	OwnerID          sql.NullInt64
	UpdatedAt        time.Time
}

func (q *Queries) UpdateOrCreateLocation(ctx context.Context, arg UpdateOrCreateLocationParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateLocation,
		arg.ID,
		arg.EveSolarSystemID,
		arg.EveTypeID,
		arg.Name,
		arg.OwnerID,
		arg.UpdatedAt,
	)
	return err
}
