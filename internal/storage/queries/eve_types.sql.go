// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: eve_types.sql

package queries

import (
	"context"
)

const createEveType = `-- name: CreateEveType :one
INSERT INTO eve_types (
    id,
    description,
    eve_group_id,
    name,
    is_published
)
VALUES (
    ?, ?, ?, ?, ?
)
RETURNING id, description, eve_group_id, name, is_published
`

type CreateEveTypeParams struct {
	ID          int64
	Description string
	EveGroupID  int64
	Name        string
	IsPublished bool
}

func (q *Queries) CreateEveType(ctx context.Context, arg CreateEveTypeParams) (EveType, error) {
	row := q.db.QueryRowContext(ctx, createEveType,
		arg.ID,
		arg.Description,
		arg.EveGroupID,
		arg.Name,
		arg.IsPublished,
	)
	var i EveType
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.EveGroupID,
		&i.Name,
		&i.IsPublished,
	)
	return i, err
}

const getEveType = `-- name: GetEveType :one
SELECT id, description, eve_group_id, name, is_published
FROM eve_types
WHERE id = ?
`

func (q *Queries) GetEveType(ctx context.Context, id int64) (EveType, error) {
	row := q.db.QueryRowContext(ctx, getEveType, id)
	var i EveType
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.EveGroupID,
		&i.Name,
		&i.IsPublished,
	)
	return i, err
}
