// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tokens.sql

package queries

import (
	"context"
	"time"
)

const getToken = `-- name: GetToken :one
SELECT access_token, my_character_id, expires_at, refresh_token, token_type
FROM tokens
WHERE my_character_id = ?
`

func (q *Queries) GetToken(ctx context.Context, myCharacterID int64) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, myCharacterID)
	var i Token
	err := row.Scan(
		&i.AccessToken,
		&i.MyCharacterID,
		&i.ExpiresAt,
		&i.RefreshToken,
		&i.TokenType,
	)
	return i, err
}

const updateOrCreateToken = `-- name: UpdateOrCreateToken :exec
INSERT INTO tokens (
    my_character_id,
    access_token,
    expires_at,
    refresh_token,
    token_type
)
VALUES (
    ?1, ?2, ?3, ?4, ?5
)
ON CONFLICT(my_character_id) DO
UPDATE SET
    access_token = ?2,
    expires_at = ?3,
    refresh_token = ?4,
    token_type = ?5
WHERE my_character_id = ?1
`

type UpdateOrCreateTokenParams struct {
	MyCharacterID int64
	AccessToken   string
	ExpiresAt     time.Time
	RefreshToken  string
	TokenType     string
}

func (q *Queries) UpdateOrCreateToken(ctx context.Context, arg UpdateOrCreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateToken,
		arg.MyCharacterID,
		arg.AccessToken,
		arg.ExpiresAt,
		arg.RefreshToken,
		arg.TokenType,
	)
	return err
}
