// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: eve_dogma_attributes.sql

package queries

import (
	"context"
)

const createEveDogmaAttribute = `-- name: CreateEveDogmaAttribute :exec
INSERT INTO eve_dogma_attributes (
    id,
    default_value,
    description,
    display_name,
    icon_id,
    name,
    is_high_good,
    is_published,
    is_stackable,
    unit_id
)
VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateEveDogmaAttributeParams struct {
	ID           int64
	DefaultValue float64
	Description  string
	DisplayName  string
	IconID       int64
	Name         string
	IsHighGood   bool
	IsPublished  bool
	IsStackable  bool
	UnitID       int64
}

func (q *Queries) CreateEveDogmaAttribute(ctx context.Context, arg CreateEveDogmaAttributeParams) error {
	_, err := q.db.ExecContext(ctx, createEveDogmaAttribute,
		arg.ID,
		arg.DefaultValue,
		arg.Description,
		arg.DisplayName,
		arg.IconID,
		arg.Name,
		arg.IsHighGood,
		arg.IsPublished,
		arg.IsStackable,
		arg.UnitID,
	)
	return err
}

const getEveDogmaAttribute = `-- name: GetEveDogmaAttribute :one
SELECT id, default_value, description, display_name, icon_id, name, is_high_good, is_published, is_stackable, unit_id
FROM eve_dogma_attributes
WHERE id = ?
`

func (q *Queries) GetEveDogmaAttribute(ctx context.Context, id int64) (EveDogmaAttribute, error) {
	row := q.db.QueryRowContext(ctx, getEveDogmaAttribute, id)
	var i EveDogmaAttribute
	err := row.Scan(
		&i.ID,
		&i.DefaultValue,
		&i.Description,
		&i.DisplayName,
		&i.IconID,
		&i.Name,
		&i.IsHighGood,
		&i.IsPublished,
		&i.IsStackable,
		&i.UnitID,
	)
	return i, err
}
