// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: wallet_journal_entries.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createWalletJournalEntries = `-- name: CreateWalletJournalEntries :exec
INSERT INTO wallet_journal_entries (
    amount,
    balance,
    context_id,
    context_id_type,
    date,
    description,
    first_party_id,
    id,
    my_character_id,
    reason,
    ref_type,
    second_party_id,
    tax,
    tax_receiver_id
)
VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateWalletJournalEntriesParams struct {
	Amount        sql.NullFloat64
	Balance       sql.NullFloat64
	ContextID     sql.NullInt64
	ContextIDType sql.NullString
	Date          time.Time
	Description   string
	FirstPartyID  sql.NullInt64
	ID            int64
	MyCharacterID int64
	Reason        sql.NullString
	RefType       string
	SecondPartyID sql.NullInt64
	Tax           sql.NullFloat64
	TaxReceiverID sql.NullInt64
}

func (q *Queries) CreateWalletJournalEntries(ctx context.Context, arg CreateWalletJournalEntriesParams) error {
	_, err := q.db.ExecContext(ctx, createWalletJournalEntries,
		arg.Amount,
		arg.Balance,
		arg.ContextID,
		arg.ContextIDType,
		arg.Date,
		arg.Description,
		arg.FirstPartyID,
		arg.ID,
		arg.MyCharacterID,
		arg.Reason,
		arg.RefType,
		arg.SecondPartyID,
		arg.Tax,
		arg.TaxReceiverID,
	)
	return err
}

const getWalletJournalEntry = `-- name: GetWalletJournalEntry :one
SELECT wallet_journal_entries.amount, wallet_journal_entries.balance, wallet_journal_entries.context_id, wallet_journal_entries.context_id_type, wallet_journal_entries.date, wallet_journal_entries.description, wallet_journal_entries.first_party_id, wallet_journal_entries.id, wallet_journal_entries.my_character_id, wallet_journal_entries.reason, wallet_journal_entries.ref_type, wallet_journal_entries.second_party_id, wallet_journal_entries.tax, wallet_journal_entries.tax_receiver_id, wallet_journal_entry_first_parties.id, wallet_journal_entry_first_parties.category, wallet_journal_entry_first_parties.name, wallet_journal_entry_second_parties.id, wallet_journal_entry_second_parties.category, wallet_journal_entry_second_parties.name, wallet_journal_entry_tax_receivers.id, wallet_journal_entry_tax_receivers.category, wallet_journal_entry_tax_receivers.name
FROM wallet_journal_entries
LEFT JOIN wallet_journal_entry_first_parties ON wallet_journal_entry_first_parties.id = wallet_journal_entries.first_party_id
LEFT JOIN wallet_journal_entry_second_parties ON wallet_journal_entry_second_parties.id = wallet_journal_entries.second_party_id
LEFT JOIN wallet_journal_entry_tax_receivers ON wallet_journal_entry_tax_receivers.id = wallet_journal_entries.tax_receiver_id
WHERE my_character_id = ? and wallet_journal_entries.id = ?
`

type GetWalletJournalEntryParams struct {
	MyCharacterID int64
	ID            int64
}

type GetWalletJournalEntryRow struct {
	WalletJournalEntry            WalletJournalEntry
	WalletJournalEntryFirstParty  WalletJournalEntryFirstParty
	WalletJournalEntrySecondParty WalletJournalEntrySecondParty
	WalletJournalEntryTaxReceiver WalletJournalEntryTaxReceiver
}

func (q *Queries) GetWalletJournalEntry(ctx context.Context, arg GetWalletJournalEntryParams) (GetWalletJournalEntryRow, error) {
	row := q.db.QueryRowContext(ctx, getWalletJournalEntry, arg.MyCharacterID, arg.ID)
	var i GetWalletJournalEntryRow
	err := row.Scan(
		&i.WalletJournalEntry.Amount,
		&i.WalletJournalEntry.Balance,
		&i.WalletJournalEntry.ContextID,
		&i.WalletJournalEntry.ContextIDType,
		&i.WalletJournalEntry.Date,
		&i.WalletJournalEntry.Description,
		&i.WalletJournalEntry.FirstPartyID,
		&i.WalletJournalEntry.ID,
		&i.WalletJournalEntry.MyCharacterID,
		&i.WalletJournalEntry.Reason,
		&i.WalletJournalEntry.RefType,
		&i.WalletJournalEntry.SecondPartyID,
		&i.WalletJournalEntry.Tax,
		&i.WalletJournalEntry.TaxReceiverID,
		&i.WalletJournalEntryFirstParty.ID,
		&i.WalletJournalEntryFirstParty.Category,
		&i.WalletJournalEntryFirstParty.Name,
		&i.WalletJournalEntrySecondParty.ID,
		&i.WalletJournalEntrySecondParty.Category,
		&i.WalletJournalEntrySecondParty.Name,
		&i.WalletJournalEntryTaxReceiver.ID,
		&i.WalletJournalEntryTaxReceiver.Category,
		&i.WalletJournalEntryTaxReceiver.Name,
	)
	return i, err
}
