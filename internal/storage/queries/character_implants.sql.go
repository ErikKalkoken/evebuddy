// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: character_implants.sql

package queries

import (
	"context"
)

const createCharacterImplant = `-- name: CreateCharacterImplant :exec
INSERT INTO character_implants (
    character_id,
    eve_type_id
)
VALUES (
    ?, ?
)
`

type CreateCharacterImplantParams struct {
	CharacterID int64
	EveTypeID   int64
}

func (q *Queries) CreateCharacterImplant(ctx context.Context, arg CreateCharacterImplantParams) error {
	_, err := q.db.ExecContext(ctx, createCharacterImplant, arg.CharacterID, arg.EveTypeID)
	return err
}

const deleteCharacterImplants = `-- name: DeleteCharacterImplants :exec
DELETE FROM character_implants
WHERE character_id = ?
`

func (q *Queries) DeleteCharacterImplants(ctx context.Context, characterID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCharacterImplants, characterID)
	return err
}

const getCharacterImplant = `-- name: GetCharacterImplant :one
SELECT
    character_implants.id, character_implants.character_id, character_implants.eve_type_id,
    eve_types.id, eve_types.description, eve_types.eve_group_id, eve_types.name, eve_types.is_published,
    eve_groups.id, eve_groups.eve_category_id, eve_groups.name, eve_groups.is_published,
    eve_categories.id, eve_categories.name, eve_categories.is_published
FROM character_implants
JOIN eve_types ON eve_types.id = character_implants.eve_type_id
JOIN eve_groups ON eve_groups.id = eve_types.eve_group_id
JOIN eve_categories ON eve_categories.id = eve_groups.eve_category_id
WHERE character_id = ?
AND eve_type_id = ?
`

type GetCharacterImplantParams struct {
	CharacterID int64
	EveTypeID   int64
}

type GetCharacterImplantRow struct {
	CharacterImplant CharacterImplant
	EveType          EveType
	EveGroup         EveGroup
	EveCategory      EveCategory
}

func (q *Queries) GetCharacterImplant(ctx context.Context, arg GetCharacterImplantParams) (GetCharacterImplantRow, error) {
	row := q.db.QueryRowContext(ctx, getCharacterImplant, arg.CharacterID, arg.EveTypeID)
	var i GetCharacterImplantRow
	err := row.Scan(
		&i.CharacterImplant.ID,
		&i.CharacterImplant.CharacterID,
		&i.CharacterImplant.EveTypeID,
		&i.EveType.ID,
		&i.EveType.Description,
		&i.EveType.EveGroupID,
		&i.EveType.Name,
		&i.EveType.IsPublished,
		&i.EveGroup.ID,
		&i.EveGroup.EveCategoryID,
		&i.EveGroup.Name,
		&i.EveGroup.IsPublished,
		&i.EveCategory.ID,
		&i.EveCategory.Name,
		&i.EveCategory.IsPublished,
	)
	return i, err
}
