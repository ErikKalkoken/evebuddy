// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: ship_skills.sql

package queries

import (
	"context"
)

const createShipSkill = `-- name: CreateShipSkill :exec
INSERT INTO ship_skills (
    rank,
    ship_type_id,
    skill_type_id,
    skill_level
)
VALUES (
    ?, ?, ?, ?
)
`

type CreateShipSkillParams struct {
	Rank        int64
	ShipTypeID  int64
	SkillTypeID int64
	SkillLevel  int64
}

func (q *Queries) CreateShipSkill(ctx context.Context, arg CreateShipSkillParams) error {
	_, err := q.db.ExecContext(ctx, createShipSkill,
		arg.Rank,
		arg.ShipTypeID,
		arg.SkillTypeID,
		arg.SkillLevel,
	)
	return err
}

const getShipSkill = `-- name: GetShipSkill :one
SELECT
    rank,
    ship_type_id,
    skill_type_id,
    skill_level
FROM ship_skills
JOIN eve_types as ship_types ON ship_types.id = ship_skills.ship_type_id
JOIN eve_types as skill_types ON skill_types.id = ship_skills.skill_type_id
WHERE ship_type_id = ? AND rank = ?
`

type GetShipSkillParams struct {
	ShipTypeID int64
	Rank       int64
}

type GetShipSkillRow struct {
	Rank        int64
	ShipTypeID  int64
	SkillTypeID int64
	SkillLevel  int64
}

func (q *Queries) GetShipSkill(ctx context.Context, arg GetShipSkillParams) (GetShipSkillRow, error) {
	row := q.db.QueryRowContext(ctx, getShipSkill, arg.ShipTypeID, arg.Rank)
	var i GetShipSkillRow
	err := row.Scan(
		&i.Rank,
		&i.ShipTypeID,
		&i.SkillTypeID,
		&i.SkillLevel,
	)
	return i, err
}

const listCharacterShipsAbilities = `-- name: ListCharacterShipsAbilities :many
SELECT DISTINCT ss2.ship_type_id as type_id, et.name as type_name, eg.id as group_id, eg.name as group_name,
(
	SELECT COUNT(*) - COUNT(NULLIF(0, cs.active_skill_level >= ss.skill_level)) == 0
	FROM ship_skills ss
	LEFT JOIN character_skills cs ON cs.eve_type_id = ss.skill_type_id AND cs.character_id = ?
	WHERE ss.ship_type_id = ss2.ship_type_id
) as can_fly
FROM ship_skills ss2
JOIN eve_types et ON et.ID = ss2.ship_type_id
JOIN eve_groups eg ON eg.ID = et.eve_group_id
WHERE et.name LIKE ?
ORDER BY et.name
`

type ListCharacterShipsAbilitiesParams struct {
	CharacterID int64
	Name        string
}

type ListCharacterShipsAbilitiesRow struct {
	TypeID    int64
	TypeName  string
	GroupID   int64
	GroupName string
	CanFly    bool
}

func (q *Queries) ListCharacterShipsAbilities(ctx context.Context, arg ListCharacterShipsAbilitiesParams) ([]ListCharacterShipsAbilitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterShipsAbilities, arg.CharacterID, arg.Name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterShipsAbilitiesRow
	for rows.Next() {
		var i ListCharacterShipsAbilitiesRow
		if err := rows.Scan(
			&i.TypeID,
			&i.TypeName,
			&i.GroupID,
			&i.GroupName,
			&i.CanFly,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShipSkills = `-- name: ListShipSkills :many
SELECT
    rank,
    ship_type_id,
    skill_type_id,
    skill_level
FROM ship_skills
JOIN eve_types as ship_types ON ship_types.id = ship_skills.ship_type_id
JOIN eve_types as skill_types ON skill_types.id = ship_skills.skill_type_id
WHERE ship_type_id = ?
`

type ListShipSkillsRow struct {
	Rank        int64
	ShipTypeID  int64
	SkillTypeID int64
	SkillLevel  int64
}

func (q *Queries) ListShipSkills(ctx context.Context, shipTypeID int64) ([]ListShipSkillsRow, error) {
	rows, err := q.db.QueryContext(ctx, listShipSkills, shipTypeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListShipSkillsRow
	for rows.Next() {
		var i ListShipSkillsRow
		if err := rows.Scan(
			&i.Rank,
			&i.ShipTypeID,
			&i.SkillTypeID,
			&i.SkillLevel,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const truncateShipSkills = `-- name: TruncateShipSkills :exec
DELETE FROM ship_skills
`

func (q *Queries) TruncateShipSkills(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, truncateShipSkills)
	return err
}
