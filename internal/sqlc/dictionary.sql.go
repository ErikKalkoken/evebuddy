// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: dictionary.sql

package sqlc

import (
	"context"
)

const createDictEntry = `-- name: CreateDictEntry :exec
INSERT INTO dictionary (
    value,
    key
)
VALUES (?, ?)
`

type CreateDictEntryParams struct {
	Value []byte
	Key   string
}

func (q *Queries) CreateDictEntry(ctx context.Context, arg CreateDictEntryParams) error {
	_, err := q.db.ExecContext(ctx, createDictEntry, arg.Value, arg.Key)
	return err
}

const deleteDictEntry = `-- name: DeleteDictEntry :exec
DELETE FROM dictionary
WHERE key = ?
`

func (q *Queries) DeleteDictEntry(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteDictEntry, key)
	return err
}

const getDictEntry = `-- name: GetDictEntry :one
SELECT "key", value
FROM dictionary
WHERE key = ?
`

func (q *Queries) GetDictEntry(ctx context.Context, key string) (Dictionary, error) {
	row := q.db.QueryRowContext(ctx, getDictEntry, key)
	var i Dictionary
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const updateDictEntry = `-- name: UpdateDictEntry :exec
UPDATE dictionary
SET value = ?
WHERE key = ?
`

type UpdateDictEntryParams struct {
	Value []byte
	Key   string
}

func (q *Queries) UpdateDictEntry(ctx context.Context, arg UpdateDictEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateDictEntry, arg.Value, arg.Key)
	return err
}
