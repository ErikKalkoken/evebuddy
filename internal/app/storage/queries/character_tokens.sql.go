// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: character_tokens.sql

package queries

import (
	"context"
	"strings"
	"time"
)

const addCharacterTokenScope = `-- name: AddCharacterTokenScope :exec
INSERT INTO
    character_token_scopes (character_token_id, scope_id)
VALUES
    (?, ?)
`

type AddCharacterTokenScopeParams struct {
	CharacterTokenID int64
	ScopeID          int64
}

func (q *Queries) AddCharacterTokenScope(ctx context.Context, arg AddCharacterTokenScopeParams) error {
	_, err := q.db.ExecContext(ctx, addCharacterTokenScope, arg.CharacterTokenID, arg.ScopeID)
	return err
}

const clearCharacterTokenScopes = `-- name: ClearCharacterTokenScopes :exec
DELETE FROM character_token_scopes
WHERE
    character_token_id IN (
        SELECT
            id
        FROM
            character_tokens
        WHERE
            character_id = ?
    )
`

func (q *Queries) ClearCharacterTokenScopes(ctx context.Context, characterID int64) error {
	_, err := q.db.ExecContext(ctx, clearCharacterTokenScopes, characterID)
	return err
}

const getCharacterToken = `-- name: GetCharacterToken :one
SELECT
    id, access_token, character_id, expires_at, refresh_token, token_type
FROM
    character_tokens
WHERE
    character_id = ?
`

func (q *Queries) GetCharacterToken(ctx context.Context, characterID int64) (CharacterToken, error) {
	row := q.db.QueryRowContext(ctx, getCharacterToken, characterID)
	var i CharacterToken
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.CharacterID,
		&i.ExpiresAt,
		&i.RefreshToken,
		&i.TokenType,
	)
	return i, err
}

const listCharacterTokenForCorporation = `-- name: ListCharacterTokenForCorporation :many
SELECT
    ct.id, ct.access_token, ct.character_id, ct.expires_at, ct.refresh_token, ct.token_type
FROM
    character_tokens ct
    JOIN eve_characters ec ON ec.id = ct.character_id
WHERE
    ec.corporation_id = ?
`

func (q *Queries) ListCharacterTokenForCorporation(ctx context.Context, corporationID int64) ([]CharacterToken, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterTokenForCorporation, corporationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterToken
	for rows.Next() {
		var i CharacterToken
		if err := rows.Scan(
			&i.ID,
			&i.AccessToken,
			&i.CharacterID,
			&i.ExpiresAt,
			&i.RefreshToken,
			&i.TokenType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterTokenForCorporationWithRoles = `-- name: ListCharacterTokenForCorporationWithRoles :many
SELECT
    ct.id, ct.access_token, ct.character_id, ct.expires_at, ct.refresh_token, ct.token_type
FROM
    character_tokens ct
    JOIN eve_characters ec ON ec.id = ct.character_id
    JOIN character_roles cr ON cr.character_id = ct.character_id
WHERE
    ec.corporation_id = ?
    AND cr.name IN (/*SLICE:roles*/?)
`

type ListCharacterTokenForCorporationWithRolesParams struct {
	CorporationID int64
	Roles         []string
}

func (q *Queries) ListCharacterTokenForCorporationWithRoles(ctx context.Context, arg ListCharacterTokenForCorporationWithRolesParams) ([]CharacterToken, error) {
	query := listCharacterTokenForCorporationWithRoles
	var queryParams []interface{}
	queryParams = append(queryParams, arg.CorporationID)
	if len(arg.Roles) > 0 {
		for _, v := range arg.Roles {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:roles*/?", strings.Repeat(",?", len(arg.Roles))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:roles*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterToken
	for rows.Next() {
		var i CharacterToken
		if err := rows.Scan(
			&i.ID,
			&i.AccessToken,
			&i.CharacterID,
			&i.ExpiresAt,
			&i.RefreshToken,
			&i.TokenType,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterTokenScopes = `-- name: ListCharacterTokenScopes :many
SELECT
    scopes.id, scopes.name
FROM
    character_token_scopes
    JOIN scopes ON scopes.id = character_token_scopes.scope_id
    JOIN character_tokens ON character_tokens.id = character_token_scopes.character_token_id
WHERE
    character_id = ?
ORDER BY
    scopes.name
`

func (q *Queries) ListCharacterTokenScopes(ctx context.Context, characterID int64) ([]Scope, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterTokenScopes, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Scope
	for rows.Next() {
		var i Scope
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateCharacterToken = `-- name: UpdateOrCreateCharacterToken :one
INSERT INTO
    character_tokens (
        character_id,
        access_token,
        expires_at,
        refresh_token,
        token_type
    )
VALUES
    (?1, ?2, ?3, ?4, ?5)
ON CONFLICT (character_id) DO UPDATE
SET
    access_token = ?2,
    expires_at = ?3,
    refresh_token = ?4,
    token_type = ?5 RETURNING id, access_token, character_id, expires_at, refresh_token, token_type
`

type UpdateOrCreateCharacterTokenParams struct {
	CharacterID  int64
	AccessToken  string
	ExpiresAt    time.Time
	RefreshToken string
	TokenType    string
}

func (q *Queries) UpdateOrCreateCharacterToken(ctx context.Context, arg UpdateOrCreateCharacterTokenParams) (CharacterToken, error) {
	row := q.db.QueryRowContext(ctx, updateOrCreateCharacterToken,
		arg.CharacterID,
		arg.AccessToken,
		arg.ExpiresAt,
		arg.RefreshToken,
		arg.TokenType,
	)
	var i CharacterToken
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.CharacterID,
		&i.ExpiresAt,
		&i.RefreshToken,
		&i.TokenType,
	)
	return i, err
}
