// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: character_contract_bids.sql

package queries

import (
	"context"
	"time"
)

const createCharacterContractBid = `-- name: CreateCharacterContractBid :exec
INSERT INTO
    character_contract_bids (
        contract_id,
        amount,
        bid_id,
        bidder_id,
        date_bid
    )
VALUES
    (
        ?,
        ?,
        ?,
        ?,
        ?
    )
`

type CreateCharacterContractBidParams struct {
	ContractID int64
	Amount     float64
	BidID      int64
	BidderID   int64
	DateBid    time.Time
}

func (q *Queries) CreateCharacterContractBid(ctx context.Context, arg CreateCharacterContractBidParams) error {
	_, err := q.db.ExecContext(ctx, createCharacterContractBid,
		arg.ContractID,
		arg.Amount,
		arg.BidID,
		arg.BidderID,
		arg.DateBid,
	)
	return err
}

const getCharacterContractBid = `-- name: GetCharacterContractBid :one
SELECT
    ccb.id, ccb.contract_id, ccb.amount, ccb.bid_id, ccb.bidder_id, ccb.date_bid,
    ee.id, ee.category, ee.name
FROM
    character_contract_bids ccb
    JOIN eve_entities ee ON ee.id = ccb.bidder_id
WHERE
    contract_id = ?
    AND bid_id = ?
`

type GetCharacterContractBidParams struct {
	ContractID int64
	BidID      int64
}

type GetCharacterContractBidRow struct {
	CharacterContractBid CharacterContractBid
	EveEntity            EveEntity
}

func (q *Queries) GetCharacterContractBid(ctx context.Context, arg GetCharacterContractBidParams) (GetCharacterContractBidRow, error) {
	row := q.db.QueryRowContext(ctx, getCharacterContractBid, arg.ContractID, arg.BidID)
	var i GetCharacterContractBidRow
	err := row.Scan(
		&i.CharacterContractBid.ID,
		&i.CharacterContractBid.ContractID,
		&i.CharacterContractBid.Amount,
		&i.CharacterContractBid.BidID,
		&i.CharacterContractBid.BidderID,
		&i.CharacterContractBid.DateBid,
		&i.EveEntity.ID,
		&i.EveEntity.Category,
		&i.EveEntity.Name,
	)
	return i, err
}

const listCharacterContractBidIDs = `-- name: ListCharacterContractBidIDs :many
SELECT
    bid_id
FROM
    character_contract_bids
WHERE
    contract_id = ?
`

func (q *Queries) ListCharacterContractBidIDs(ctx context.Context, contractID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterContractBidIDs, contractID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var bid_id int64
		if err := rows.Scan(&bid_id); err != nil {
			return nil, err
		}
		items = append(items, bid_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterContractBids = `-- name: ListCharacterContractBids :many
SELECT
    ccb.id, ccb.contract_id, ccb.amount, ccb.bid_id, ccb.bidder_id, ccb.date_bid,
    ee.id, ee.category, ee.name
FROM
    character_contract_bids ccb
    JOIN eve_entities ee ON ee.id = ccb.bidder_id
WHERE
    contract_id = ?
`

type ListCharacterContractBidsRow struct {
	CharacterContractBid CharacterContractBid
	EveEntity            EveEntity
}

func (q *Queries) ListCharacterContractBids(ctx context.Context, contractID int64) ([]ListCharacterContractBidsRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterContractBids, contractID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterContractBidsRow
	for rows.Next() {
		var i ListCharacterContractBidsRow
		if err := rows.Scan(
			&i.CharacterContractBid.ID,
			&i.CharacterContractBid.ContractID,
			&i.CharacterContractBid.Amount,
			&i.CharacterContractBid.BidID,
			&i.CharacterContractBid.BidderID,
			&i.CharacterContractBid.DateBid,
			&i.EveEntity.ID,
			&i.EveEntity.Category,
			&i.EveEntity.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
