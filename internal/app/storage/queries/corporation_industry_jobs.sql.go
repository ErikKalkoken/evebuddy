// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: corporation_industry_jobs.sql

package queries

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const deleteCorporationIndustryJobs = `-- name: DeleteCorporationIndustryJobs :exec
DELETE FROM corporation_industry_jobs
WHERE
    corporation_id = ?
`

func (q *Queries) DeleteCorporationIndustryJobs(ctx context.Context, corporationID int64) error {
	_, err := q.db.ExecContext(ctx, deleteCorporationIndustryJobs, corporationID)
	return err
}

const deleteCorporationIndustryJobsByID = `-- name: DeleteCorporationIndustryJobsByID :exec
DELETE FROM corporation_industry_jobs
WHERE
    corporation_id = ?
    AND job_id IN (/*SLICE:job_ids*/?)
`

type DeleteCorporationIndustryJobsByIDParams struct {
	CorporationID int64
	JobIds        []int64
}

func (q *Queries) DeleteCorporationIndustryJobsByID(ctx context.Context, arg DeleteCorporationIndustryJobsByIDParams) error {
	query := deleteCorporationIndustryJobsByID
	var queryParams []interface{}
	queryParams = append(queryParams, arg.CorporationID)
	if len(arg.JobIds) > 0 {
		for _, v := range arg.JobIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:job_ids*/?", strings.Repeat(",?", len(arg.JobIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:job_ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getCorporationIndustryJob = `-- name: GetCorporationIndustryJob :one
SELECT
    cij.id, cij.activity_id, cij.blueprint_id, cij.blueprint_location_id, cij.blueprint_type_id, cij.corporation_id, cij.completed_character_id, cij.completed_date, cij.cost, cij.duration, cij.end_date, cij.facility_id, cij.installer_id, cij.job_id, cij.licensed_runs, cij.output_location_id, cij.pause_date, cij.probability, cij.product_type_id, cij.runs, cij.start_date, cij.location_id, cij.status, cij.successful_runs,
    ic.id, ic.category, ic.name,
    bt.name AS blueprint_type_name,
    cc.name AS completed_character_name,
    pt.name AS product_type_name,
    lo.name AS location_name,
    los.security_status as station_security
FROM
    corporation_industry_jobs cij
    JOIN eve_types bt ON bt.id = cij.blueprint_type_id
    JOIN eve_entities ic ON ic.id = cij.installer_id
    JOIN eve_locations lo ON lo.id = cij.location_id
    LEFT JOIN eve_solar_systems los ON los.id = lo.eve_solar_system_id
    LEFT JOIN eve_entities cc ON cc.id = cij.completed_character_id
    LEFT JOIN eve_types pt ON pt.id = cij.product_type_id
WHERE
    corporation_id = ?
    AND job_id = ?
`

type GetCorporationIndustryJobParams struct {
	CorporationID int64
	JobID         int64
}

type GetCorporationIndustryJobRow struct {
	CorporationIndustryJob CorporationIndustryJob
	EveEntity              EveEntity
	BlueprintTypeName      string
	CompletedCharacterName sql.NullString
	ProductTypeName        sql.NullString
	LocationName           string
	StationSecurity        sql.NullFloat64
}

func (q *Queries) GetCorporationIndustryJob(ctx context.Context, arg GetCorporationIndustryJobParams) (GetCorporationIndustryJobRow, error) {
	row := q.db.QueryRowContext(ctx, getCorporationIndustryJob, arg.CorporationID, arg.JobID)
	var i GetCorporationIndustryJobRow
	err := row.Scan(
		&i.CorporationIndustryJob.ID,
		&i.CorporationIndustryJob.ActivityID,
		&i.CorporationIndustryJob.BlueprintID,
		&i.CorporationIndustryJob.BlueprintLocationID,
		&i.CorporationIndustryJob.BlueprintTypeID,
		&i.CorporationIndustryJob.CorporationID,
		&i.CorporationIndustryJob.CompletedCharacterID,
		&i.CorporationIndustryJob.CompletedDate,
		&i.CorporationIndustryJob.Cost,
		&i.CorporationIndustryJob.Duration,
		&i.CorporationIndustryJob.EndDate,
		&i.CorporationIndustryJob.FacilityID,
		&i.CorporationIndustryJob.InstallerID,
		&i.CorporationIndustryJob.JobID,
		&i.CorporationIndustryJob.LicensedRuns,
		&i.CorporationIndustryJob.OutputLocationID,
		&i.CorporationIndustryJob.PauseDate,
		&i.CorporationIndustryJob.Probability,
		&i.CorporationIndustryJob.ProductTypeID,
		&i.CorporationIndustryJob.Runs,
		&i.CorporationIndustryJob.StartDate,
		&i.CorporationIndustryJob.LocationID,
		&i.CorporationIndustryJob.Status,
		&i.CorporationIndustryJob.SuccessfulRuns,
		&i.EveEntity.ID,
		&i.EveEntity.Category,
		&i.EveEntity.Name,
		&i.BlueprintTypeName,
		&i.CompletedCharacterName,
		&i.ProductTypeName,
		&i.LocationName,
		&i.StationSecurity,
	)
	return i, err
}

const listAllCorporationIndustryJobs = `-- name: ListAllCorporationIndustryJobs :many
SELECT
    cij.id, cij.activity_id, cij.blueprint_id, cij.blueprint_location_id, cij.blueprint_type_id, cij.corporation_id, cij.completed_character_id, cij.completed_date, cij.cost, cij.duration, cij.end_date, cij.facility_id, cij.installer_id, cij.job_id, cij.licensed_runs, cij.output_location_id, cij.pause_date, cij.probability, cij.product_type_id, cij.runs, cij.start_date, cij.location_id, cij.status, cij.successful_runs,
    ic.id, ic.category, ic.name,
    bt.name AS blueprint_type_name,
    cc.name AS completed_character_name,
    pt.name AS product_type_name,
    lo.name AS location_name,
    los.security_status as station_security
FROM
    corporation_industry_jobs cij
    JOIN eve_types bt ON bt.id = cij.blueprint_type_id
    JOIN eve_entities ic ON ic.id = cij.installer_id
    JOIN eve_locations lo ON lo.id = cij.location_id
    LEFT JOIN eve_solar_systems los ON los.id = lo.eve_solar_system_id
    LEFT JOIN eve_entities cc ON cc.id = cij.completed_character_id
    LEFT JOIN eve_types pt ON pt.id = cij.product_type_id
`

type ListAllCorporationIndustryJobsRow struct {
	CorporationIndustryJob CorporationIndustryJob
	EveEntity              EveEntity
	BlueprintTypeName      string
	CompletedCharacterName sql.NullString
	ProductTypeName        sql.NullString
	LocationName           string
	StationSecurity        sql.NullFloat64
}

func (q *Queries) ListAllCorporationIndustryJobs(ctx context.Context) ([]ListAllCorporationIndustryJobsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllCorporationIndustryJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllCorporationIndustryJobsRow
	for rows.Next() {
		var i ListAllCorporationIndustryJobsRow
		if err := rows.Scan(
			&i.CorporationIndustryJob.ID,
			&i.CorporationIndustryJob.ActivityID,
			&i.CorporationIndustryJob.BlueprintID,
			&i.CorporationIndustryJob.BlueprintLocationID,
			&i.CorporationIndustryJob.BlueprintTypeID,
			&i.CorporationIndustryJob.CorporationID,
			&i.CorporationIndustryJob.CompletedCharacterID,
			&i.CorporationIndustryJob.CompletedDate,
			&i.CorporationIndustryJob.Cost,
			&i.CorporationIndustryJob.Duration,
			&i.CorporationIndustryJob.EndDate,
			&i.CorporationIndustryJob.FacilityID,
			&i.CorporationIndustryJob.InstallerID,
			&i.CorporationIndustryJob.JobID,
			&i.CorporationIndustryJob.LicensedRuns,
			&i.CorporationIndustryJob.OutputLocationID,
			&i.CorporationIndustryJob.PauseDate,
			&i.CorporationIndustryJob.Probability,
			&i.CorporationIndustryJob.ProductTypeID,
			&i.CorporationIndustryJob.Runs,
			&i.CorporationIndustryJob.StartDate,
			&i.CorporationIndustryJob.LocationID,
			&i.CorporationIndustryJob.Status,
			&i.CorporationIndustryJob.SuccessfulRuns,
			&i.EveEntity.ID,
			&i.EveEntity.Category,
			&i.EveEntity.Name,
			&i.BlueprintTypeName,
			&i.CompletedCharacterName,
			&i.ProductTypeName,
			&i.LocationName,
			&i.StationSecurity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCorporationIndustryJobs = `-- name: ListCorporationIndustryJobs :many
SELECT
    cij.id, cij.activity_id, cij.blueprint_id, cij.blueprint_location_id, cij.blueprint_type_id, cij.corporation_id, cij.completed_character_id, cij.completed_date, cij.cost, cij.duration, cij.end_date, cij.facility_id, cij.installer_id, cij.job_id, cij.licensed_runs, cij.output_location_id, cij.pause_date, cij.probability, cij.product_type_id, cij.runs, cij.start_date, cij.location_id, cij.status, cij.successful_runs,
    ic.id, ic.category, ic.name,
    bt.name AS blueprint_type_name,
    cc.name AS completed_character_name,
    pt.name AS product_type_name,
    lo.name AS location_name,
    los.security_status as station_security
FROM
    corporation_industry_jobs cij
    JOIN eve_types bt ON bt.id = cij.blueprint_type_id
    JOIN eve_entities ic ON ic.id = cij.installer_id
    JOIN eve_locations lo ON lo.id = cij.location_id
    LEFT JOIN eve_solar_systems los ON los.id = lo.eve_solar_system_id
    LEFT JOIN eve_entities cc ON cc.id = cij.completed_character_id
    LEFT JOIN eve_types pt ON pt.id = cij.product_type_id
WHERE
    corporation_id = ?
`

type ListCorporationIndustryJobsRow struct {
	CorporationIndustryJob CorporationIndustryJob
	EveEntity              EveEntity
	BlueprintTypeName      string
	CompletedCharacterName sql.NullString
	ProductTypeName        sql.NullString
	LocationName           string
	StationSecurity        sql.NullFloat64
}

func (q *Queries) ListCorporationIndustryJobs(ctx context.Context, corporationID int64) ([]ListCorporationIndustryJobsRow, error) {
	rows, err := q.db.QueryContext(ctx, listCorporationIndustryJobs, corporationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCorporationIndustryJobsRow
	for rows.Next() {
		var i ListCorporationIndustryJobsRow
		if err := rows.Scan(
			&i.CorporationIndustryJob.ID,
			&i.CorporationIndustryJob.ActivityID,
			&i.CorporationIndustryJob.BlueprintID,
			&i.CorporationIndustryJob.BlueprintLocationID,
			&i.CorporationIndustryJob.BlueprintTypeID,
			&i.CorporationIndustryJob.CorporationID,
			&i.CorporationIndustryJob.CompletedCharacterID,
			&i.CorporationIndustryJob.CompletedDate,
			&i.CorporationIndustryJob.Cost,
			&i.CorporationIndustryJob.Duration,
			&i.CorporationIndustryJob.EndDate,
			&i.CorporationIndustryJob.FacilityID,
			&i.CorporationIndustryJob.InstallerID,
			&i.CorporationIndustryJob.JobID,
			&i.CorporationIndustryJob.LicensedRuns,
			&i.CorporationIndustryJob.OutputLocationID,
			&i.CorporationIndustryJob.PauseDate,
			&i.CorporationIndustryJob.Probability,
			&i.CorporationIndustryJob.ProductTypeID,
			&i.CorporationIndustryJob.Runs,
			&i.CorporationIndustryJob.StartDate,
			&i.CorporationIndustryJob.LocationID,
			&i.CorporationIndustryJob.Status,
			&i.CorporationIndustryJob.SuccessfulRuns,
			&i.EveEntity.ID,
			&i.EveEntity.Category,
			&i.EveEntity.Name,
			&i.BlueprintTypeName,
			&i.CompletedCharacterName,
			&i.ProductTypeName,
			&i.LocationName,
			&i.StationSecurity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateCorporationIndustryJobs = `-- name: UpdateOrCreateCorporationIndustryJobs :exec
INSERT INTO
    corporation_industry_jobs (
        activity_id,
        blueprint_id,
        blueprint_location_id,
        blueprint_type_id,
        corporation_id,
        completed_character_id,
        completed_date,
        cost,
        duration,
        end_date,
        facility_id,
        installer_id,
        job_id,
        licensed_runs,
        output_location_id,
        pause_date,
        probability,
        product_type_id,
        runs,
        start_date,
        location_id,
        status,
        successful_runs
    )
VALUES
    (
        ?1,
        ?2,
        ?3,
        ?4,
        ?5,
        ?6,
        ?7,
        ?8,
        ?9,
        ?10,
        ?11,
        ?12,
        ?13,
        ?14,
        ?15,
        ?16,
        ?17,
        ?18,
        ?19,
        ?20,
        ?21,
        ?22,
        ?23
    )
ON CONFLICT (corporation_id, job_id) DO UPDATE
SET
    completed_character_id = ?6,
    completed_date = ?7,
    end_date = ?10,
    pause_date = ?16,
    status = ?22,
    successful_runs = ?23
`

type UpdateOrCreateCorporationIndustryJobsParams struct {
	ActivityID           int64
	BlueprintID          int64
	BlueprintLocationID  int64
	BlueprintTypeID      int64
	CorporationID        int64
	CompletedCharacterID sql.NullInt64
	CompletedDate        sql.NullTime
	Cost                 sql.NullFloat64
	Duration             int64
	EndDate              time.Time
	FacilityID           int64
	InstallerID          int64
	JobID                int64
	LicensedRuns         sql.NullInt64
	OutputLocationID     int64
	PauseDate            sql.NullTime
	Probability          sql.NullFloat64
	ProductTypeID        sql.NullInt64
	Runs                 int64
	StartDate            time.Time
	LocationID           int64
	Status               string
	SuccessfulRuns       sql.NullInt64
}

func (q *Queries) UpdateOrCreateCorporationIndustryJobs(ctx context.Context, arg UpdateOrCreateCorporationIndustryJobsParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateCorporationIndustryJobs,
		arg.ActivityID,
		arg.BlueprintID,
		arg.BlueprintLocationID,
		arg.BlueprintTypeID,
		arg.CorporationID,
		arg.CompletedCharacterID,
		arg.CompletedDate,
		arg.Cost,
		arg.Duration,
		arg.EndDate,
		arg.FacilityID,
		arg.InstallerID,
		arg.JobID,
		arg.LicensedRuns,
		arg.OutputLocationID,
		arg.PauseDate,
		arg.Probability,
		arg.ProductTypeID,
		arg.Runs,
		arg.StartDate,
		arg.LocationID,
		arg.Status,
		arg.SuccessfulRuns,
	)
	return err
}
