// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: character_attributes.sql

package queries

import (
	"context"
	"database/sql"
)

const getCharacterAttributes = `-- name: GetCharacterAttributes :one
SELECT
    id, bonus_remaps, character_id, charisma, intelligence, last_remap_date, memory, perception, willpower
FROM
    character_attributes
WHERE
    character_id = ?1
`

func (q *Queries) GetCharacterAttributes(ctx context.Context, characterID int64) (CharacterAttribute, error) {
	row := q.db.QueryRowContext(ctx, getCharacterAttributes, characterID)
	var i CharacterAttribute
	err := row.Scan(
		&i.ID,
		&i.BonusRemaps,
		&i.CharacterID,
		&i.Charisma,
		&i.Intelligence,
		&i.LastRemapDate,
		&i.Memory,
		&i.Perception,
		&i.Willpower,
	)
	return i, err
}

const updateOrCreateCharacterAttributes = `-- name: UpdateOrCreateCharacterAttributes :exec
INSERT INTO
    character_attributes (
        character_id,
        bonus_remaps,
        charisma,
        intelligence,
        last_remap_date,
        memory,
        perception,
        willpower
    )
VALUES
    (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)
ON CONFLICT (character_id) DO UPDATE
SET
    bonus_remaps = ?2,
    charisma = ?3,
    intelligence = ?4,
    last_remap_date = ?5,
    memory = ?6,
    perception = ?7,
    willpower = ?8
`

type UpdateOrCreateCharacterAttributesParams struct {
	CharacterID   int64
	BonusRemaps   int64
	Charisma      int64
	Intelligence  int64
	LastRemapDate sql.NullTime
	Memory        int64
	Perception    int64
	Willpower     int64
}

func (q *Queries) UpdateOrCreateCharacterAttributes(ctx context.Context, arg UpdateOrCreateCharacterAttributesParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateCharacterAttributes,
		arg.CharacterID,
		arg.BonusRemaps,
		arg.Charisma,
		arg.Intelligence,
		arg.LastRemapDate,
		arg.Memory,
		arg.Perception,
		arg.Willpower,
	)
	return err
}
