// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: corporation_wallet_names.sql

package queries

import (
	"context"
)

const getCorporationWalletName = `-- name: GetCorporationWalletName :one
SELECT
    id, corporation_id, division_id, name
FROM
    corporation_wallet_names
WHERE
    corporation_id = ?
    AND division_id = ?
`

type GetCorporationWalletNameParams struct {
	CorporationID int64
	DivisionID    int64
}

func (q *Queries) GetCorporationWalletName(ctx context.Context, arg GetCorporationWalletNameParams) (CorporationWalletName, error) {
	row := q.db.QueryRowContext(ctx, getCorporationWalletName, arg.CorporationID, arg.DivisionID)
	var i CorporationWalletName
	err := row.Scan(
		&i.ID,
		&i.CorporationID,
		&i.DivisionID,
		&i.Name,
	)
	return i, err
}

const updateOrCreateCorporationWalletName = `-- name: UpdateOrCreateCorporationWalletName :exec
INSERT INTO
    corporation_wallet_names (corporation_id, division_id, name)
VALUES
    (?1, ?2, ?3)
ON CONFLICT (corporation_id, division_id) DO UPDATE
SET
    name = ?3
`

type UpdateOrCreateCorporationWalletNameParams struct {
	CorporationID int64
	DivisionID    int64
	Name          string
}

func (q *Queries) UpdateOrCreateCorporationWalletName(ctx context.Context, arg UpdateOrCreateCorporationWalletNameParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateCorporationWalletName, arg.CorporationID, arg.DivisionID, arg.Name)
	return err
}
