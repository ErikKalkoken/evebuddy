// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: character_tags.sql

package queries

import (
	"context"
)

const createCharacterTag = `-- name: CreateCharacterTag :one
INSERT INTO
    character_tags (name)
VALUES
    (?) RETURNING id, name
`

func (q *Queries) CreateCharacterTag(ctx context.Context, name string) (CharacterTag, error) {
	row := q.db.QueryRowContext(ctx, createCharacterTag, name)
	var i CharacterTag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createCharactersCharacterTag = `-- name: CreateCharactersCharacterTag :exec
INSERT INTO
    characters_character_tags (character_id, tag_id)
VALUES
    (?, ?)
`

type CreateCharactersCharacterTagParams struct {
	CharacterID int64
	TagID       int64
}

func (q *Queries) CreateCharactersCharacterTag(ctx context.Context, arg CreateCharactersCharacterTagParams) error {
	_, err := q.db.ExecContext(ctx, createCharactersCharacterTag, arg.CharacterID, arg.TagID)
	return err
}

const deleteCharacterTag = `-- name: DeleteCharacterTag :exec
DELETE FROM character_tags
WHERE
    id = ?
`

func (q *Queries) DeleteCharacterTag(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCharacterTag, id)
	return err
}

const deleteCharactersCharacterTag = `-- name: DeleteCharactersCharacterTag :exec
DELETE FROM characters_character_tags
WHERE
    character_id = ?
    AND tag_id = ?
`

type DeleteCharactersCharacterTagParams struct {
	CharacterID int64
	TagID       int64
}

func (q *Queries) DeleteCharactersCharacterTag(ctx context.Context, arg DeleteCharactersCharacterTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteCharactersCharacterTag, arg.CharacterID, arg.TagID)
	return err
}

const getCharacterTag = `-- name: GetCharacterTag :one
SELECT
    id, name
FROM
    character_tags
WHERE
    id = ?
`

func (q *Queries) GetCharacterTag(ctx context.Context, id int64) (CharacterTag, error) {
	row := q.db.QueryRowContext(ctx, getCharacterTag, id)
	var i CharacterTag
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listCharacterTags = `-- name: ListCharacterTags :many
SELECT
    id, name
FROM
    character_tags
ORDER BY
    name
`

func (q *Queries) ListCharacterTags(ctx context.Context) ([]CharacterTag, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterTag
	for rows.Next() {
		var i CharacterTag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterTagsForCharacter = `-- name: ListCharacterTagsForCharacter :many
SELECT
    t.id, t.name
FROM
    characters_character_tags ct
    JOIN character_tags t ON t.id = ct.tag_id
WHERE
    ct.character_id = ?
ORDER BY
    t.name
`

func (q *Queries) ListCharacterTagsForCharacter(ctx context.Context, characterID int64) ([]CharacterTag, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterTagsForCharacter, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterTag
	for rows.Next() {
		var i CharacterTag
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharactersForCharacterTag = `-- name: ListCharactersForCharacterTag :many
SELECT
    ec.id, ec.name
FROM
    characters_character_tags ct
    JOIN characters c ON c.id = ct.character_id
    JOIN eve_characters ec ON ec.id = c.id
WHERE
    ct.tag_id = ?
ORDER BY
    ec.name
`

type ListCharactersForCharacterTagRow struct {
	ID   int64
	Name string
}

func (q *Queries) ListCharactersForCharacterTag(ctx context.Context, tagID int64) ([]ListCharactersForCharacterTagRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharactersForCharacterTag, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharactersForCharacterTagRow
	for rows.Next() {
		var i ListCharactersForCharacterTagRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacterTagName = `-- name: UpdateCharacterTagName :exec
UPDATE character_tags
SET
    name = ?
WHERE
    id = ?
`

type UpdateCharacterTagNameParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateCharacterTagName(ctx context.Context, arg UpdateCharacterTagNameParams) error {
	_, err := q.db.ExecContext(ctx, updateCharacterTagName, arg.Name, arg.ID)
	return err
}
