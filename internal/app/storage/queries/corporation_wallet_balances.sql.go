// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: corporation_wallet_balances.sql

package queries

import (
	"context"
)

const getCorporationWalletBalance = `-- name: GetCorporationWalletBalance :one
SELECT
    id, corporation_id, division_id, balance
FROM
    corporation_wallet_balances
WHERE
    corporation_id = ?
    AND division_id = ?
`

type GetCorporationWalletBalanceParams struct {
	CorporationID int64
	DivisionID    int64
}

func (q *Queries) GetCorporationWalletBalance(ctx context.Context, arg GetCorporationWalletBalanceParams) (CorporationWalletBalance, error) {
	row := q.db.QueryRowContext(ctx, getCorporationWalletBalance, arg.CorporationID, arg.DivisionID)
	var i CorporationWalletBalance
	err := row.Scan(
		&i.ID,
		&i.CorporationID,
		&i.DivisionID,
		&i.Balance,
	)
	return i, err
}

const updateOrCreateCorporationWalletBalance = `-- name: UpdateOrCreateCorporationWalletBalance :exec
INSERT INTO
    corporation_wallet_balances (corporation_id, division_id, balance)
VALUES
    (?1, ?2, ?3)
ON CONFLICT (corporation_id, division_id) DO UPDATE
SET
    balance = ?3
`

type UpdateOrCreateCorporationWalletBalanceParams struct {
	CorporationID int64
	DivisionID    int64
	Balance       float64
}

func (q *Queries) UpdateOrCreateCorporationWalletBalance(ctx context.Context, arg UpdateOrCreateCorporationWalletBalanceParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateCorporationWalletBalance, arg.CorporationID, arg.DivisionID, arg.Balance)
	return err
}
