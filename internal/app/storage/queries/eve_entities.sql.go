// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: eve_entities.sql

package queries

import (
	"context"
	"strings"
)

const createEveEntity = `-- name: CreateEveEntity :one
INSERT INTO
    eve_entities (id, category, name)
VALUES
    (?, ?, ?) RETURNING id, category, name
`

type CreateEveEntityParams struct {
	ID       int64
	Category string
	Name     string
}

func (q *Queries) CreateEveEntity(ctx context.Context, arg CreateEveEntityParams) (EveEntity, error) {
	row := q.db.QueryRowContext(ctx, createEveEntity, arg.ID, arg.Category, arg.Name)
	var i EveEntity
	err := row.Scan(&i.ID, &i.Category, &i.Name)
	return i, err
}

const getEveEntity = `-- name: GetEveEntity :one
SELECT
    id, category, name
FROM
    eve_entities
WHERE
    id = ?
`

func (q *Queries) GetEveEntity(ctx context.Context, id int64) (EveEntity, error) {
	row := q.db.QueryRowContext(ctx, getEveEntity, id)
	var i EveEntity
	err := row.Scan(&i.ID, &i.Category, &i.Name)
	return i, err
}

const listEveEntities = `-- name: ListEveEntities :many
SELECT
    id, category, name
FROM
    eve_entities
`

func (q *Queries) ListEveEntities(ctx context.Context) ([]EveEntity, error) {
	rows, err := q.db.QueryContext(ctx, listEveEntities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EveEntity
	for rows.Next() {
		var i EveEntity
		if err := rows.Scan(&i.ID, &i.Category, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEveEntitiesByPartialName = `-- name: ListEveEntitiesByPartialName :many
SELECT
    id, category, name
FROM
    eve_entities
WHERE
    name LIKE ?
ORDER BY
    name COLLATE NOCASE
`

func (q *Queries) ListEveEntitiesByPartialName(ctx context.Context, name string) ([]EveEntity, error) {
	rows, err := q.db.QueryContext(ctx, listEveEntitiesByPartialName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EveEntity
	for rows.Next() {
		var i EveEntity
		if err := rows.Scan(&i.ID, &i.Category, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEveEntitiesForIDs = `-- name: ListEveEntitiesForIDs :many
SELECT
    id, category, name
FROM
    eve_entities
WHERE
    id IN (/*SLICE:ids*/?)
`

func (q *Queries) ListEveEntitiesForIDs(ctx context.Context, ids []int64) ([]EveEntity, error) {
	query := listEveEntitiesForIDs
	var queryParams []interface{}
	if len(ids) > 0 {
		for _, v := range ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EveEntity
	for rows.Next() {
		var i EveEntity
		if err := rows.Scan(&i.ID, &i.Category, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEveEntityByNameAndCategory = `-- name: ListEveEntityByNameAndCategory :many
SELECT
    id, category, name
FROM
    eve_entities
WHERE
    name = ?
    AND category = ?
`

type ListEveEntityByNameAndCategoryParams struct {
	Name     string
	Category string
}

func (q *Queries) ListEveEntityByNameAndCategory(ctx context.Context, arg ListEveEntityByNameAndCategoryParams) ([]EveEntity, error) {
	rows, err := q.db.QueryContext(ctx, listEveEntityByNameAndCategory, arg.Name, arg.Category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EveEntity
	for rows.Next() {
		var i EveEntity
		if err := rows.Scan(&i.ID, &i.Category, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEveEntityIDs = `-- name: ListEveEntityIDs :many
SELECT
    id
FROM
    eve_entities
`

func (q *Queries) ListEveEntityIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listEveEntityIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEveEntity = `-- name: UpdateEveEntity :exec
UPDATE eve_entities
SET
    name = ?
WHERE
    id = ?
`

type UpdateEveEntityParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateEveEntity(ctx context.Context, arg UpdateEveEntityParams) error {
	_, err := q.db.ExecContext(ctx, updateEveEntity, arg.Name, arg.ID)
	return err
}

const updateOrCreateEveEntity = `-- name: UpdateOrCreateEveEntity :one
INSERT INTO
    eve_entities (id, category, name)
VALUES
    (?1, ?2, ?3)
ON CONFLICT (id) DO UPDATE
SET
    category = ?2,
    name = ?3 RETURNING id, category, name
`

type UpdateOrCreateEveEntityParams struct {
	ID       int64
	Category string
	Name     string
}

func (q *Queries) UpdateOrCreateEveEntity(ctx context.Context, arg UpdateOrCreateEveEntityParams) (EveEntity, error) {
	row := q.db.QueryRowContext(ctx, updateOrCreateEveEntity, arg.ID, arg.Category, arg.Name)
	var i EveEntity
	err := row.Scan(&i.ID, &i.Category, &i.Name)
	return i, err
}
