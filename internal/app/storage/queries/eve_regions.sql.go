// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: eve_regions.sql

package queries

import (
	"context"
)

const createEveRegion = `-- name: CreateEveRegion :one
INSERT INTO eve_regions (
    id,
    description,
    name
)
VALUES (
    ?, ?, ?
)
RETURNING id, description, name
`

type CreateEveRegionParams struct {
	ID          int64
	Description string
	Name        string
}

func (q *Queries) CreateEveRegion(ctx context.Context, arg CreateEveRegionParams) (EveRegion, error) {
	row := q.db.QueryRowContext(ctx, createEveRegion, arg.ID, arg.Description, arg.Name)
	var i EveRegion
	err := row.Scan(&i.ID, &i.Description, &i.Name)
	return i, err
}

const getEveRegion = `-- name: GetEveRegion :one
SELECT id, description, name
FROM eve_regions
WHERE id = ?
`

func (q *Queries) GetEveRegion(ctx context.Context, id int64) (EveRegion, error) {
	row := q.db.QueryRowContext(ctx, getEveRegion, id)
	var i EveRegion
	err := row.Scan(&i.ID, &i.Description, &i.Name)
	return i, err
}

const listEveRegionIDs = `-- name: ListEveRegionIDs :many
SELECT id
FROM eve_regions
`

func (q *Queries) ListEveRegionIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listEveRegionIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
