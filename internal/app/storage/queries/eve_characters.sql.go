// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: eve_characters.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createEveCharacter = `-- name: CreateEveCharacter :exec
INSERT INTO
    eve_characters (
        id,
        alliance_id,
        birthday,
        corporation_id,
        description,
        faction_id,
        gender,
        name,
        race_id,
        security_status,
        title
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateEveCharacterParams struct {
	ID             int64
	AllianceID     sql.NullInt64
	Birthday       time.Time
	CorporationID  int64
	Description    string
	FactionID      sql.NullInt64
	Gender         string
	Name           string
	RaceID         int64
	SecurityStatus float64
	Title          string
}

func (q *Queries) CreateEveCharacter(ctx context.Context, arg CreateEveCharacterParams) error {
	_, err := q.db.ExecContext(ctx, createEveCharacter,
		arg.ID,
		arg.AllianceID,
		arg.Birthday,
		arg.CorporationID,
		arg.Description,
		arg.FactionID,
		arg.Gender,
		arg.Name,
		arg.RaceID,
		arg.SecurityStatus,
		arg.Title,
	)
	return err
}

const deleteEveCharacter = `-- name: DeleteEveCharacter :exec
DELETE FROM eve_characters
WHERE
    id = ?
`

func (q *Queries) DeleteEveCharacter(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEveCharacter, id)
	return err
}

const getEveCharacter = `-- name: GetEveCharacter :one
SELECT
    ec.alliance_id, ec.birthday, ec.corporation_id, ec.description, ec.gender, ec.faction_id, ec.id, ec.name, ec.race_id, ec.security_status, ec.title,
    eec.id, eec.category, eec.name,
    er.id, er.description, er.name,
    eea.name as alliance_name,
    eea.category as alliance_category,
    eef.name as faction_name,
    eef.category as faction_category
FROM
    eve_characters ec
    JOIN eve_entities AS eec ON eec.id = ec.corporation_id
    JOIN eve_races er ON er.id = ec.race_id
    LEFT JOIN eve_entities as eea ON eea.id = ec.alliance_id
    LEFT JOIN eve_entities as eef ON eef.id = ec.faction_id
WHERE
    ec.id = ?
`

type GetEveCharacterRow struct {
	EveCharacter     EveCharacter
	EveEntity        EveEntity
	EveRace          EveRace
	AllianceName     sql.NullString
	AllianceCategory sql.NullString
	FactionName      sql.NullString
	FactionCategory  sql.NullString
}

func (q *Queries) GetEveCharacter(ctx context.Context, id int64) (GetEveCharacterRow, error) {
	row := q.db.QueryRowContext(ctx, getEveCharacter, id)
	var i GetEveCharacterRow
	err := row.Scan(
		&i.EveCharacter.AllianceID,
		&i.EveCharacter.Birthday,
		&i.EveCharacter.CorporationID,
		&i.EveCharacter.Description,
		&i.EveCharacter.Gender,
		&i.EveCharacter.FactionID,
		&i.EveCharacter.ID,
		&i.EveCharacter.Name,
		&i.EveCharacter.RaceID,
		&i.EveCharacter.SecurityStatus,
		&i.EveCharacter.Title,
		&i.EveEntity.ID,
		&i.EveEntity.Category,
		&i.EveEntity.Name,
		&i.EveRace.ID,
		&i.EveRace.Description,
		&i.EveRace.Name,
		&i.AllianceName,
		&i.AllianceCategory,
		&i.FactionName,
		&i.FactionCategory,
	)
	return i, err
}

const listEveCharacterIDs = `-- name: ListEveCharacterIDs :many
SELECT
    id
FROM
    eve_characters
`

func (q *Queries) ListEveCharacterIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listEveCharacterIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEveCharacter = `-- name: UpdateEveCharacter :exec
UPDATE eve_characters
SET
    alliance_id = ?,
    corporation_id = ?,
    description = ?,
    faction_id = ?,
    name = ?,
    security_status = ?,
    title = ?
WHERE
    id = ?
`

type UpdateEveCharacterParams struct {
	AllianceID     sql.NullInt64
	CorporationID  int64
	Description    string
	FactionID      sql.NullInt64
	Name           string
	SecurityStatus float64
	Title          string
	ID             int64
}

func (q *Queries) UpdateEveCharacter(ctx context.Context, arg UpdateEveCharacterParams) error {
	_, err := q.db.ExecContext(ctx, updateEveCharacter,
		arg.AllianceID,
		arg.CorporationID,
		arg.Description,
		arg.FactionID,
		arg.Name,
		arg.SecurityStatus,
		arg.Title,
		arg.ID,
	)
	return err
}

const updateEveCharacterName = `-- name: UpdateEveCharacterName :exec
UPDATE eve_characters
SET
    name = ?
WHERE
    id = ?
`

type UpdateEveCharacterNameParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateEveCharacterName(ctx context.Context, arg UpdateEveCharacterNameParams) error {
	_, err := q.db.ExecContext(ctx, updateEveCharacterName, arg.Name, arg.ID)
	return err
}
