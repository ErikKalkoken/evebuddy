// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: corporation_section_status.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const getCorporationSectionStatus = `-- name: GetCorporationSectionStatus :one
SELECT
    id, comment, corporation_id, section_id, created_at, updated_at, content_hash, completed_at, error, started_at
FROM
    corporation_section_status
WHERE
    corporation_id = ?
    AND section_id = ?
`

type GetCorporationSectionStatusParams struct {
	CorporationID int64
	SectionID     string
}

func (q *Queries) GetCorporationSectionStatus(ctx context.Context, arg GetCorporationSectionStatusParams) (CorporationSectionStatus, error) {
	row := q.db.QueryRowContext(ctx, getCorporationSectionStatus, arg.CorporationID, arg.SectionID)
	var i CorporationSectionStatus
	err := row.Scan(
		&i.ID,
		&i.Comment,
		&i.CorporationID,
		&i.SectionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ContentHash,
		&i.CompletedAt,
		&i.Error,
		&i.StartedAt,
	)
	return i, err
}

const listCorporationSectionStatus = `-- name: ListCorporationSectionStatus :many
SELECT
    id, comment, corporation_id, section_id, created_at, updated_at, content_hash, completed_at, error, started_at
FROM
    corporation_section_status
WHERE
    corporation_id = ?
`

func (q *Queries) ListCorporationSectionStatus(ctx context.Context, corporationID int64) ([]CorporationSectionStatus, error) {
	rows, err := q.db.QueryContext(ctx, listCorporationSectionStatus, corporationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CorporationSectionStatus
	for rows.Next() {
		var i CorporationSectionStatus
		if err := rows.Scan(
			&i.ID,
			&i.Comment,
			&i.CorporationID,
			&i.SectionID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ContentHash,
			&i.CompletedAt,
			&i.Error,
			&i.StartedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCorporationSectionStatusContentHash = `-- name: UpdateCorporationSectionStatusContentHash :exec
UPDATE corporation_section_status
SET
    content_hash = ?
WHERE
    corporation_id = ?
    AND section_id = ?
`

type UpdateCorporationSectionStatusContentHashParams struct {
	ContentHash   string
	CorporationID int64
	SectionID     string
}

func (q *Queries) UpdateCorporationSectionStatusContentHash(ctx context.Context, arg UpdateCorporationSectionStatusContentHashParams) error {
	_, err := q.db.ExecContext(ctx, updateCorporationSectionStatusContentHash, arg.ContentHash, arg.CorporationID, arg.SectionID)
	return err
}

const updateOrCreateCorporationSectionStatus = `-- name: UpdateOrCreateCorporationSectionStatus :one
INSERT INTO
    corporation_section_status (
        comment,
        corporation_id,
        section_id,
        completed_at,
        content_hash,
        error,
        started_at,
        updated_at
    )
VALUES
    (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8)
ON CONFLICT (corporation_id, section_id) DO UPDATE
SET
    comment = ?1,
    completed_at = ?4,
    content_hash = ?5,
    error = ?6,
    started_at = ?7,
    updated_at = ?8 RETURNING id, comment, corporation_id, section_id, created_at, updated_at, content_hash, completed_at, error, started_at
`

type UpdateOrCreateCorporationSectionStatusParams struct {
	Comment       string
	CorporationID int64
	SectionID     string
	CompletedAt   sql.NullTime
	ContentHash   string
	Error         string
	StartedAt     sql.NullTime
	UpdatedAt     time.Time
}

func (q *Queries) UpdateOrCreateCorporationSectionStatus(ctx context.Context, arg UpdateOrCreateCorporationSectionStatusParams) (CorporationSectionStatus, error) {
	row := q.db.QueryRowContext(ctx, updateOrCreateCorporationSectionStatus,
		arg.Comment,
		arg.CorporationID,
		arg.SectionID,
		arg.CompletedAt,
		arg.ContentHash,
		arg.Error,
		arg.StartedAt,
		arg.UpdatedAt,
	)
	var i CorporationSectionStatus
	err := row.Scan(
		&i.ID,
		&i.Comment,
		&i.CorporationID,
		&i.SectionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ContentHash,
		&i.CompletedAt,
		&i.Error,
		&i.StartedAt,
	)
	return i, err
}
