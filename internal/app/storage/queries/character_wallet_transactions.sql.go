// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: character_wallet_transactions.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const createCharacterWalletTransaction = `-- name: CreateCharacterWalletTransaction :exec
INSERT INTO
    character_wallet_transactions (
        client_id,
        date,
        eve_type_id,
        is_buy,
        is_personal,
        journal_ref_id,
        character_id,
        location_id,
        quantity,
        transaction_id,
        unit_price
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateCharacterWalletTransactionParams struct {
	ClientID      int64
	Date          time.Time
	EveTypeID     int64
	IsBuy         bool
	IsPersonal    bool
	JournalRefID  int64
	CharacterID   int64
	LocationID    int64
	Quantity      int64
	TransactionID int64
	UnitPrice     float64
}

func (q *Queries) CreateCharacterWalletTransaction(ctx context.Context, arg CreateCharacterWalletTransactionParams) error {
	_, err := q.db.ExecContext(ctx, createCharacterWalletTransaction,
		arg.ClientID,
		arg.Date,
		arg.EveTypeID,
		arg.IsBuy,
		arg.IsPersonal,
		arg.JournalRefID,
		arg.CharacterID,
		arg.LocationID,
		arg.Quantity,
		arg.TransactionID,
		arg.UnitPrice,
	)
	return err
}

const getCharacterWalletTransaction = `-- name: GetCharacterWalletTransaction :one
SELECT
    cwt.id, cwt.character_id, cwt.client_id, cwt.date, cwt.eve_type_id, cwt.is_buy, cwt.is_personal, cwt.journal_ref_id, cwt.location_id, cwt.quantity, cwt.transaction_id, cwt.unit_price,
    ee.id, ee.category, ee.name,
    et.id, et.eve_group_id, et.capacity, et.description, et.graphic_id, et.icon_id, et.is_published, et.market_group_id, et.mass, et.name, et.packaged_volume, et.portion_size, et.radius, et.volume,
    eg.id, eg.eve_category_id, eg.name, eg.is_published,
    ec.id, ec.name, ec.is_published,
    el.name as location_name,
    ess.security_status as system_security_status,
    er.id as region_id,
    er.name as region_name
FROM
    character_wallet_transactions cwt
    JOIN eve_entities ee ON ee.id = cwt.client_id
    JOIN eve_types et ON et.id = cwt.eve_type_id
    JOIN eve_groups eg ON eg.id = et.eve_group_id
    JOIN eve_categories ec ON ec.id = eg.eve_category_id
    JOIN eve_locations el ON el.id = cwt.location_id
    LEFT JOIN eve_solar_systems ess ON ess.id = el.eve_solar_system_id
    LEFT JOIN eve_constellations ON eve_constellations.id = ess.eve_constellation_id
    LEFT JOIN eve_regions er ON er.id = eve_constellations.eve_region_id
WHERE
    character_id = ?
    and transaction_id = ?
`

type GetCharacterWalletTransactionParams struct {
	CharacterID   int64
	TransactionID int64
}

type GetCharacterWalletTransactionRow struct {
	CharacterWalletTransaction CharacterWalletTransaction
	EveEntity                  EveEntity
	EveType                    EveType
	EveGroup                   EveGroup
	EveCategory                EveCategory
	LocationName               string
	SystemSecurityStatus       sql.NullFloat64
	RegionID                   sql.NullInt64
	RegionName                 sql.NullString
}

func (q *Queries) GetCharacterWalletTransaction(ctx context.Context, arg GetCharacterWalletTransactionParams) (GetCharacterWalletTransactionRow, error) {
	row := q.db.QueryRowContext(ctx, getCharacterWalletTransaction, arg.CharacterID, arg.TransactionID)
	var i GetCharacterWalletTransactionRow
	err := row.Scan(
		&i.CharacterWalletTransaction.ID,
		&i.CharacterWalletTransaction.CharacterID,
		&i.CharacterWalletTransaction.ClientID,
		&i.CharacterWalletTransaction.Date,
		&i.CharacterWalletTransaction.EveTypeID,
		&i.CharacterWalletTransaction.IsBuy,
		&i.CharacterWalletTransaction.IsPersonal,
		&i.CharacterWalletTransaction.JournalRefID,
		&i.CharacterWalletTransaction.LocationID,
		&i.CharacterWalletTransaction.Quantity,
		&i.CharacterWalletTransaction.TransactionID,
		&i.CharacterWalletTransaction.UnitPrice,
		&i.EveEntity.ID,
		&i.EveEntity.Category,
		&i.EveEntity.Name,
		&i.EveType.ID,
		&i.EveType.EveGroupID,
		&i.EveType.Capacity,
		&i.EveType.Description,
		&i.EveType.GraphicID,
		&i.EveType.IconID,
		&i.EveType.IsPublished,
		&i.EveType.MarketGroupID,
		&i.EveType.Mass,
		&i.EveType.Name,
		&i.EveType.PackagedVolume,
		&i.EveType.PortionSize,
		&i.EveType.Radius,
		&i.EveType.Volume,
		&i.EveGroup.ID,
		&i.EveGroup.EveCategoryID,
		&i.EveGroup.Name,
		&i.EveGroup.IsPublished,
		&i.EveCategory.ID,
		&i.EveCategory.Name,
		&i.EveCategory.IsPublished,
		&i.LocationName,
		&i.SystemSecurityStatus,
		&i.RegionID,
		&i.RegionName,
	)
	return i, err
}

const listCharacterWalletTransactionIDs = `-- name: ListCharacterWalletTransactionIDs :many
SELECT
    transaction_id
FROM
    character_wallet_transactions
WHERE
    character_id = ?
`

func (q *Queries) ListCharacterWalletTransactionIDs(ctx context.Context, characterID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterWalletTransactionIDs, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var transaction_id int64
		if err := rows.Scan(&transaction_id); err != nil {
			return nil, err
		}
		items = append(items, transaction_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterWalletTransactions = `-- name: ListCharacterWalletTransactions :many
SELECT
    cwt.id, cwt.character_id, cwt.client_id, cwt.date, cwt.eve_type_id, cwt.is_buy, cwt.is_personal, cwt.journal_ref_id, cwt.location_id, cwt.quantity, cwt.transaction_id, cwt.unit_price,
    ee.id, ee.category, ee.name,
    et.id, et.eve_group_id, et.capacity, et.description, et.graphic_id, et.icon_id, et.is_published, et.market_group_id, et.mass, et.name, et.packaged_volume, et.portion_size, et.radius, et.volume,
    eg.id, eg.eve_category_id, eg.name, eg.is_published,
    ec.id, ec.name, ec.is_published,
    el.name as location_name,
    ess.security_status as system_security_status,
     er.id as region_id,
    er.name as region_name
FROM
    character_wallet_transactions cwt
    JOIN eve_entities ee ON ee.id = cwt.client_id
    JOIN eve_types et ON et.id = cwt.eve_type_id
    JOIN eve_groups eg ON eg.id = et.eve_group_id
    JOIN eve_categories ec ON ec.id = eg.eve_category_id
    JOIN eve_locations el ON el.id = cwt.location_id
    LEFT JOIN eve_solar_systems ess ON ess.id = el.eve_solar_system_id
    LEFT JOIN eve_constellations ON eve_constellations.id = ess.eve_constellation_id
    LEFT JOIN eve_regions er ON er.id = eve_constellations.eve_region_id
WHERE
    character_id = ?
ORDER BY
    date DESC
`

type ListCharacterWalletTransactionsRow struct {
	CharacterWalletTransaction CharacterWalletTransaction
	EveEntity                  EveEntity
	EveType                    EveType
	EveGroup                   EveGroup
	EveCategory                EveCategory
	LocationName               string
	SystemSecurityStatus       sql.NullFloat64
	RegionID                   sql.NullInt64
	RegionName                 sql.NullString
}

func (q *Queries) ListCharacterWalletTransactions(ctx context.Context, characterID int64) ([]ListCharacterWalletTransactionsRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterWalletTransactions, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterWalletTransactionsRow
	for rows.Next() {
		var i ListCharacterWalletTransactionsRow
		if err := rows.Scan(
			&i.CharacterWalletTransaction.ID,
			&i.CharacterWalletTransaction.CharacterID,
			&i.CharacterWalletTransaction.ClientID,
			&i.CharacterWalletTransaction.Date,
			&i.CharacterWalletTransaction.EveTypeID,
			&i.CharacterWalletTransaction.IsBuy,
			&i.CharacterWalletTransaction.IsPersonal,
			&i.CharacterWalletTransaction.JournalRefID,
			&i.CharacterWalletTransaction.LocationID,
			&i.CharacterWalletTransaction.Quantity,
			&i.CharacterWalletTransaction.TransactionID,
			&i.CharacterWalletTransaction.UnitPrice,
			&i.EveEntity.ID,
			&i.EveEntity.Category,
			&i.EveEntity.Name,
			&i.EveType.ID,
			&i.EveType.EveGroupID,
			&i.EveType.Capacity,
			&i.EveType.Description,
			&i.EveType.GraphicID,
			&i.EveType.IconID,
			&i.EveType.IsPublished,
			&i.EveType.MarketGroupID,
			&i.EveType.Mass,
			&i.EveType.Name,
			&i.EveType.PackagedVolume,
			&i.EveType.PortionSize,
			&i.EveType.Radius,
			&i.EveType.Volume,
			&i.EveGroup.ID,
			&i.EveGroup.EveCategoryID,
			&i.EveGroup.Name,
			&i.EveGroup.IsPublished,
			&i.EveCategory.ID,
			&i.EveCategory.Name,
			&i.EveCategory.IsPublished,
			&i.LocationName,
			&i.SystemSecurityStatus,
			&i.RegionID,
			&i.RegionName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
