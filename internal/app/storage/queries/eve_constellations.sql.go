// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: eve_constellations.sql

package queries

import (
	"context"
)

const createEveConstellation = `-- name: CreateEveConstellation :exec
INSERT INTO eve_constellations (
    id,
    eve_region_id,
    name
)
VALUES (
    ?, ?, ?
)
`

type CreateEveConstellationParams struct {
	ID          int64
	EveRegionID int64
	Name        string
}

func (q *Queries) CreateEveConstellation(ctx context.Context, arg CreateEveConstellationParams) error {
	_, err := q.db.ExecContext(ctx, createEveConstellation, arg.ID, arg.EveRegionID, arg.Name)
	return err
}

const getEveConstellation = `-- name: GetEveConstellation :one
SELECT eve_constellations.id, eve_constellations.eve_region_id, eve_constellations.name, eve_regions.id, eve_regions.description, eve_regions.name
FROM eve_constellations
JOIN eve_regions ON eve_regions.id = eve_constellations.eve_region_id
WHERE eve_constellations.id = ?
`

type GetEveConstellationRow struct {
	EveConstellation EveConstellation
	EveRegion        EveRegion
}

func (q *Queries) GetEveConstellation(ctx context.Context, id int64) (GetEveConstellationRow, error) {
	row := q.db.QueryRowContext(ctx, getEveConstellation, id)
	var i GetEveConstellationRow
	err := row.Scan(
		&i.EveConstellation.ID,
		&i.EveConstellation.EveRegionID,
		&i.EveConstellation.Name,
		&i.EveRegion.ID,
		&i.EveRegion.Description,
		&i.EveRegion.Name,
	)
	return i, err
}
