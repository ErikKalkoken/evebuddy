// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: dictionary.sql

package queries

import (
	"context"
)

const deleteDictEntry = `-- name: DeleteDictEntry :exec
DELETE FROM dictionary
WHERE key = ?
`

func (q *Queries) DeleteDictEntry(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteDictEntry, key)
	return err
}

const getDictEntry = `-- name: GetDictEntry :one
SELECT id, "key", value
FROM dictionary
WHERE key = ?
`

func (q *Queries) GetDictEntry(ctx context.Context, key string) (Dictionary, error) {
	row := q.db.QueryRowContext(ctx, getDictEntry, key)
	var i Dictionary
	err := row.Scan(&i.ID, &i.Key, &i.Value)
	return i, err
}

const updateOrCreateDictEntry = `-- name: UpdateOrCreateDictEntry :exec
INSERT INTO dictionary (
    key,
    value
)
VALUES (?1, ?2)
ON CONFLICT(key) DO
UPDATE SET value = ?2
WHERE key = ?1
`

type UpdateOrCreateDictEntryParams struct {
	Key   string
	Value []byte
}

func (q *Queries) UpdateOrCreateDictEntry(ctx context.Context, arg UpdateOrCreateDictEntryParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateDictEntry, arg.Key, arg.Value)
	return err
}
