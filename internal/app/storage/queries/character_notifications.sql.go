// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: character_notifications.sql

package queries

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const countCharacterNotifications = `-- name: CountCharacterNotifications :many
SELECT
    cn.type_id,
    nt.name,
    SUM(NOT cn.is_read) AS unread_count,
    COUNT(*) AS total_count
FROM
    character_notifications cn
    JOIN notification_types nt ON nt.id = cn.type_id
WHERE
    character_id = ?
GROUP BY
    cn.type_id,
    nt.name
`

type CountCharacterNotificationsRow struct {
	TypeID      int64
	Name        string
	UnreadCount sql.NullFloat64
	TotalCount  int64
}

func (q *Queries) CountCharacterNotifications(ctx context.Context, characterID int64) ([]CountCharacterNotificationsRow, error) {
	rows, err := q.db.QueryContext(ctx, countCharacterNotifications, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CountCharacterNotificationsRow
	for rows.Next() {
		var i CountCharacterNotificationsRow
		if err := rows.Scan(
			&i.TypeID,
			&i.Name,
			&i.UnreadCount,
			&i.TotalCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createCharacterNotification = `-- name: CreateCharacterNotification :exec
INSERT INTO
    character_notifications (
        body,
        character_id,
        is_processed,
        is_read,
        notification_id,
        recipient_id,
        sender_id,
        text,
        timestamp,
        title,
        type_id
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateCharacterNotificationParams struct {
	Body           sql.NullString
	CharacterID    int64
	IsProcessed    bool
	IsRead         bool
	NotificationID int64
	RecipientID    sql.NullInt64
	SenderID       int64
	Text           string
	Timestamp      time.Time
	Title          sql.NullString
	TypeID         int64
}

func (q *Queries) CreateCharacterNotification(ctx context.Context, arg CreateCharacterNotificationParams) error {
	_, err := q.db.ExecContext(ctx, createCharacterNotification,
		arg.Body,
		arg.CharacterID,
		arg.IsProcessed,
		arg.IsRead,
		arg.NotificationID,
		arg.RecipientID,
		arg.SenderID,
		arg.Text,
		arg.Timestamp,
		arg.Title,
		arg.TypeID,
	)
	return err
}

const createNotificationType = `-- name: CreateNotificationType :one
INSERT INTO
    notification_types (name)
VALUES
    (?) RETURNING id
`

func (q *Queries) CreateNotificationType(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNotificationType, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCharacterNotification = `-- name: GetCharacterNotification :one
SELECT
    cn.id, cn.body, cn.character_id, cn.is_processed, cn.is_read, cn.notification_id, cn.sender_id, cn.text, cn.timestamp, cn.title, cn.type_id, cn.recipient_id,
    sender.id, sender.category, sender.name,
    nt.id, nt.name,
    recipient.name as recipient_name,
    recipient.category as recipient_category
FROM
    character_notifications cn
    JOIN eve_entities sender ON sender.id = cn.sender_id
    JOIN notification_types nt ON nt.id = cn.type_id
    LEFT JOIN eve_entities recipient ON recipient.id = cn.recipient_id
WHERE
    character_id = ?
    and notification_id = ?
`

type GetCharacterNotificationParams struct {
	CharacterID    int64
	NotificationID int64
}

type GetCharacterNotificationRow struct {
	CharacterNotification CharacterNotification
	EveEntity             EveEntity
	NotificationType      NotificationType
	RecipientName         sql.NullString
	RecipientCategory     sql.NullString
}

func (q *Queries) GetCharacterNotification(ctx context.Context, arg GetCharacterNotificationParams) (GetCharacterNotificationRow, error) {
	row := q.db.QueryRowContext(ctx, getCharacterNotification, arg.CharacterID, arg.NotificationID)
	var i GetCharacterNotificationRow
	err := row.Scan(
		&i.CharacterNotification.ID,
		&i.CharacterNotification.Body,
		&i.CharacterNotification.CharacterID,
		&i.CharacterNotification.IsProcessed,
		&i.CharacterNotification.IsRead,
		&i.CharacterNotification.NotificationID,
		&i.CharacterNotification.SenderID,
		&i.CharacterNotification.Text,
		&i.CharacterNotification.Timestamp,
		&i.CharacterNotification.Title,
		&i.CharacterNotification.TypeID,
		&i.CharacterNotification.RecipientID,
		&i.EveEntity.ID,
		&i.EveEntity.Category,
		&i.EveEntity.Name,
		&i.NotificationType.ID,
		&i.NotificationType.Name,
		&i.RecipientName,
		&i.RecipientCategory,
	)
	return i, err
}

const getNotificationTypeID = `-- name: GetNotificationTypeID :one
SELECT
    id
FROM
    notification_types
WHERE
    name = ?
`

func (q *Queries) GetNotificationTypeID(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNotificationTypeID, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listCharacterNotificationIDs = `-- name: ListCharacterNotificationIDs :many
SELECT
    notification_id
FROM
    character_notifications
WHERE
    character_id = ?
`

func (q *Queries) ListCharacterNotificationIDs(ctx context.Context, characterID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterNotificationIDs, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var notification_id int64
		if err := rows.Scan(&notification_id); err != nil {
			return nil, err
		}
		items = append(items, notification_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterNotificationsAll = `-- name: ListCharacterNotificationsAll :many
SELECT
    cn.id, cn.body, cn.character_id, cn.is_processed, cn.is_read, cn.notification_id, cn.sender_id, cn.text, cn.timestamp, cn.title, cn.type_id, cn.recipient_id,
    sender.id, sender.category, sender.name,
    nt.id, nt.name,
    recipient.name as recipient_name,
    recipient.category as recipient_category
FROM
    character_notifications cn
    JOIN eve_entities sender ON sender.id = cn.sender_id
    JOIN notification_types nt ON nt.id = cn.type_id
    LEFT JOIN eve_entities recipient ON recipient.id = cn.recipient_id
WHERE
    character_id = ?
ORDER BY
    timestamp DESC
`

type ListCharacterNotificationsAllRow struct {
	CharacterNotification CharacterNotification
	EveEntity             EveEntity
	NotificationType      NotificationType
	RecipientName         sql.NullString
	RecipientCategory     sql.NullString
}

func (q *Queries) ListCharacterNotificationsAll(ctx context.Context, characterID int64) ([]ListCharacterNotificationsAllRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterNotificationsAll, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterNotificationsAllRow
	for rows.Next() {
		var i ListCharacterNotificationsAllRow
		if err := rows.Scan(
			&i.CharacterNotification.ID,
			&i.CharacterNotification.Body,
			&i.CharacterNotification.CharacterID,
			&i.CharacterNotification.IsProcessed,
			&i.CharacterNotification.IsRead,
			&i.CharacterNotification.NotificationID,
			&i.CharacterNotification.SenderID,
			&i.CharacterNotification.Text,
			&i.CharacterNotification.Timestamp,
			&i.CharacterNotification.Title,
			&i.CharacterNotification.TypeID,
			&i.CharacterNotification.RecipientID,
			&i.EveEntity.ID,
			&i.EveEntity.Category,
			&i.EveEntity.Name,
			&i.NotificationType.ID,
			&i.NotificationType.Name,
			&i.RecipientName,
			&i.RecipientCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterNotificationsTypes = `-- name: ListCharacterNotificationsTypes :many
SELECT
    cn.id, cn.body, cn.character_id, cn.is_processed, cn.is_read, cn.notification_id, cn.sender_id, cn.text, cn.timestamp, cn.title, cn.type_id, cn.recipient_id,
    sender.id, sender.category, sender.name,
    nt.id, nt.name,
    recipient.name as recipient_name,
    recipient.category as recipient_category
FROM
    character_notifications cn
    JOIN eve_entities sender ON sender.id = cn.sender_id
    JOIN notification_types nt ON nt.id = cn.type_id
    LEFT JOIN eve_entities recipient ON recipient.id = cn.recipient_id
WHERE
    character_id = ?
    AND nt.name IN (/*SLICE:names*/?)
ORDER BY
    timestamp DESC
`

type ListCharacterNotificationsTypesParams struct {
	CharacterID int64
	Names       []string
}

type ListCharacterNotificationsTypesRow struct {
	CharacterNotification CharacterNotification
	EveEntity             EveEntity
	NotificationType      NotificationType
	RecipientName         sql.NullString
	RecipientCategory     sql.NullString
}

func (q *Queries) ListCharacterNotificationsTypes(ctx context.Context, arg ListCharacterNotificationsTypesParams) ([]ListCharacterNotificationsTypesRow, error) {
	query := listCharacterNotificationsTypes
	var queryParams []interface{}
	queryParams = append(queryParams, arg.CharacterID)
	if len(arg.Names) > 0 {
		for _, v := range arg.Names {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:names*/?", strings.Repeat(",?", len(arg.Names))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:names*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterNotificationsTypesRow
	for rows.Next() {
		var i ListCharacterNotificationsTypesRow
		if err := rows.Scan(
			&i.CharacterNotification.ID,
			&i.CharacterNotification.Body,
			&i.CharacterNotification.CharacterID,
			&i.CharacterNotification.IsProcessed,
			&i.CharacterNotification.IsRead,
			&i.CharacterNotification.NotificationID,
			&i.CharacterNotification.SenderID,
			&i.CharacterNotification.Text,
			&i.CharacterNotification.Timestamp,
			&i.CharacterNotification.Title,
			&i.CharacterNotification.TypeID,
			&i.CharacterNotification.RecipientID,
			&i.EveEntity.ID,
			&i.EveEntity.Category,
			&i.EveEntity.Name,
			&i.NotificationType.ID,
			&i.NotificationType.Name,
			&i.RecipientName,
			&i.RecipientCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterNotificationsUnprocessed = `-- name: ListCharacterNotificationsUnprocessed :many
SELECT
    cn.id, cn.body, cn.character_id, cn.is_processed, cn.is_read, cn.notification_id, cn.sender_id, cn.text, cn.timestamp, cn.title, cn.type_id, cn.recipient_id,
    sender.id, sender.category, sender.name,
    nt.id, nt.name,
    recipient.name as recipient_name,
    recipient.category as recipient_category
FROM
    character_notifications cn
    JOIN eve_entities sender ON sender.id = cn.sender_id
    JOIN notification_types nt ON nt.id = cn.type_id
    LEFT JOIN eve_entities recipient ON recipient.id = cn.recipient_id
WHERE
    character_id = ?
    AND cn.is_processed IS FALSE
    AND title IS NOT NULL
    AND body IS NOT NULL
    AND timestamp > ?
ORDER BY
    timestamp
`

type ListCharacterNotificationsUnprocessedParams struct {
	CharacterID int64
	Timestamp   time.Time
}

type ListCharacterNotificationsUnprocessedRow struct {
	CharacterNotification CharacterNotification
	EveEntity             EveEntity
	NotificationType      NotificationType
	RecipientName         sql.NullString
	RecipientCategory     sql.NullString
}

func (q *Queries) ListCharacterNotificationsUnprocessed(ctx context.Context, arg ListCharacterNotificationsUnprocessedParams) ([]ListCharacterNotificationsUnprocessedRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterNotificationsUnprocessed, arg.CharacterID, arg.Timestamp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterNotificationsUnprocessedRow
	for rows.Next() {
		var i ListCharacterNotificationsUnprocessedRow
		if err := rows.Scan(
			&i.CharacterNotification.ID,
			&i.CharacterNotification.Body,
			&i.CharacterNotification.CharacterID,
			&i.CharacterNotification.IsProcessed,
			&i.CharacterNotification.IsRead,
			&i.CharacterNotification.NotificationID,
			&i.CharacterNotification.SenderID,
			&i.CharacterNotification.Text,
			&i.CharacterNotification.Timestamp,
			&i.CharacterNotification.Title,
			&i.CharacterNotification.TypeID,
			&i.CharacterNotification.RecipientID,
			&i.EveEntity.ID,
			&i.EveEntity.Category,
			&i.EveEntity.Name,
			&i.NotificationType.ID,
			&i.NotificationType.Name,
			&i.RecipientName,
			&i.RecipientCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterNotificationsUnread = `-- name: ListCharacterNotificationsUnread :many
SELECT
    cn.id, cn.body, cn.character_id, cn.is_processed, cn.is_read, cn.notification_id, cn.sender_id, cn.text, cn.timestamp, cn.title, cn.type_id, cn.recipient_id,
    sender.id, sender.category, sender.name,
    nt.id, nt.name,
    recipient.name as recipient_name,
    recipient.category as recipient_category
FROM
    character_notifications cn
    JOIN eve_entities sender ON sender.id = cn.sender_id
    JOIN notification_types nt ON nt.id = cn.type_id
    LEFT JOIN eve_entities recipient ON recipient.id = cn.recipient_id
WHERE
    character_id = ?
    AND cn.is_read IS FALSE
ORDER BY
    timestamp DESC
`

type ListCharacterNotificationsUnreadRow struct {
	CharacterNotification CharacterNotification
	EveEntity             EveEntity
	NotificationType      NotificationType
	RecipientName         sql.NullString
	RecipientCategory     sql.NullString
}

func (q *Queries) ListCharacterNotificationsUnread(ctx context.Context, characterID int64) ([]ListCharacterNotificationsUnreadRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterNotificationsUnread, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterNotificationsUnreadRow
	for rows.Next() {
		var i ListCharacterNotificationsUnreadRow
		if err := rows.Scan(
			&i.CharacterNotification.ID,
			&i.CharacterNotification.Body,
			&i.CharacterNotification.CharacterID,
			&i.CharacterNotification.IsProcessed,
			&i.CharacterNotification.IsRead,
			&i.CharacterNotification.NotificationID,
			&i.CharacterNotification.SenderID,
			&i.CharacterNotification.Text,
			&i.CharacterNotification.Timestamp,
			&i.CharacterNotification.Title,
			&i.CharacterNotification.TypeID,
			&i.CharacterNotification.RecipientID,
			&i.EveEntity.ID,
			&i.EveEntity.Category,
			&i.EveEntity.Name,
			&i.NotificationType.ID,
			&i.NotificationType.Name,
			&i.RecipientName,
			&i.RecipientCategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacterNotification = `-- name: UpdateCharacterNotification :exec
UPDATE
    character_notifications
SET
    body = ?2,
    is_read = ?3,
    title = ?4
WHERE
    id = ?1
`

type UpdateCharacterNotificationParams struct {
	ID     int64
	Body   sql.NullString
	IsRead bool
	Title  sql.NullString
}

func (q *Queries) UpdateCharacterNotification(ctx context.Context, arg UpdateCharacterNotificationParams) error {
	_, err := q.db.ExecContext(ctx, updateCharacterNotification,
		arg.ID,
		arg.Body,
		arg.IsRead,
		arg.Title,
	)
	return err
}

const updateCharacterNotificationSetProcessed = `-- name: UpdateCharacterNotificationSetProcessed :exec
UPDATE
    character_notifications
SET
    is_processed = TRUE
WHERE
    id = ?1
`

func (q *Queries) UpdateCharacterNotificationSetProcessed(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateCharacterNotificationSetProcessed, id)
	return err
}
