// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: character_notifications.sql

package queries

import (
	"context"
	"time"
)

const createCharacterNotification = `-- name: CreateCharacterNotification :exec
INSERT INTO character_notifications (
    character_id,
    is_read,
    notification_id,
    sender_id,
    text,
    timestamp,
    type_id
)
VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
`

type CreateCharacterNotificationParams struct {
	CharacterID    int64
	IsRead         bool
	NotificationID int64
	SenderID       int64
	Text           string
	Timestamp      time.Time
	TypeID         int64
}

func (q *Queries) CreateCharacterNotification(ctx context.Context, arg CreateCharacterNotificationParams) error {
	_, err := q.db.ExecContext(ctx, createCharacterNotification,
		arg.CharacterID,
		arg.IsRead,
		arg.NotificationID,
		arg.SenderID,
		arg.Text,
		arg.Timestamp,
		arg.TypeID,
	)
	return err
}

const createNotificationType = `-- name: CreateNotificationType :one
INSERT INTO notification_types (
    name
)
VALUES (
    ?
)
RETURNING id
`

func (q *Queries) CreateNotificationType(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, createNotificationType, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCharacterNotification = `-- name: GetCharacterNotification :one
SELECT cn.id, cn.character_id, cn.is_read, cn.notification_id, cn.sender_id, cn.text, cn.timestamp, cn.type_id, ee.id, ee.category, ee.name, nt.id, nt.name
FROM character_notifications cn
JOIN eve_entities ee ON ee.id = cn.sender_id
JOIN notification_types nt ON nt.id = cn.type_id
WHERE character_id = ? and notification_id = ?
`

type GetCharacterNotificationParams struct {
	CharacterID    int64
	NotificationID int64
}

type GetCharacterNotificationRow struct {
	CharacterNotification CharacterNotification
	EveEntity             EveEntity
	NotificationType      NotificationType
}

func (q *Queries) GetCharacterNotification(ctx context.Context, arg GetCharacterNotificationParams) (GetCharacterNotificationRow, error) {
	row := q.db.QueryRowContext(ctx, getCharacterNotification, arg.CharacterID, arg.NotificationID)
	var i GetCharacterNotificationRow
	err := row.Scan(
		&i.CharacterNotification.ID,
		&i.CharacterNotification.CharacterID,
		&i.CharacterNotification.IsRead,
		&i.CharacterNotification.NotificationID,
		&i.CharacterNotification.SenderID,
		&i.CharacterNotification.Text,
		&i.CharacterNotification.Timestamp,
		&i.CharacterNotification.TypeID,
		&i.EveEntity.ID,
		&i.EveEntity.Category,
		&i.EveEntity.Name,
		&i.NotificationType.ID,
		&i.NotificationType.Name,
	)
	return i, err
}

const getNotificationTypeID = `-- name: GetNotificationTypeID :one
SELECT id
FROM notification_types
WHERE name = ?
`

func (q *Queries) GetNotificationTypeID(ctx context.Context, name string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNotificationTypeID, name)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listCharacterNotificationIDs = `-- name: ListCharacterNotificationIDs :many
SELECT notification_id
FROM character_notifications
WHERE character_id = ?
`

func (q *Queries) ListCharacterNotificationIDs(ctx context.Context, characterID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterNotificationIDs, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var notification_id int64
		if err := rows.Scan(&notification_id); err != nil {
			return nil, err
		}
		items = append(items, notification_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterNotifications = `-- name: ListCharacterNotifications :many
SELECT cn.id, cn.character_id, cn.is_read, cn.notification_id, cn.sender_id, cn.text, cn.timestamp, cn.type_id, ee.id, ee.category, ee.name, nt.id, nt.name
FROM character_notifications cn
JOIN eve_entities ee ON ee.id = cn.sender_id
JOIN notification_types nt ON nt.id = cn.type_id
WHERE character_id = ?
ORDER BY timestamp DESC
`

type ListCharacterNotificationsRow struct {
	CharacterNotification CharacterNotification
	EveEntity             EveEntity
	NotificationType      NotificationType
}

func (q *Queries) ListCharacterNotifications(ctx context.Context, characterID int64) ([]ListCharacterNotificationsRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterNotifications, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterNotificationsRow
	for rows.Next() {
		var i ListCharacterNotificationsRow
		if err := rows.Scan(
			&i.CharacterNotification.ID,
			&i.CharacterNotification.CharacterID,
			&i.CharacterNotification.IsRead,
			&i.CharacterNotification.NotificationID,
			&i.CharacterNotification.SenderID,
			&i.CharacterNotification.Text,
			&i.CharacterNotification.Timestamp,
			&i.CharacterNotification.TypeID,
			&i.EveEntity.ID,
			&i.EveEntity.Category,
			&i.EveEntity.Name,
			&i.NotificationType.ID,
			&i.NotificationType.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacterNotificationsIsRead = `-- name: UpdateCharacterNotificationsIsRead :exec
UPDATE character_notifications
SET is_read = ?2
WHERE id = ?1
`

type UpdateCharacterNotificationsIsReadParams struct {
	ID     int64
	IsRead bool
}

func (q *Queries) UpdateCharacterNotificationsIsRead(ctx context.Context, arg UpdateCharacterNotificationsIsReadParams) error {
	_, err := q.db.ExecContext(ctx, updateCharacterNotificationsIsRead, arg.ID, arg.IsRead)
	return err
}
