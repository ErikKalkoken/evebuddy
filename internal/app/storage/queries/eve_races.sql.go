// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: eve_races.sql

package queries

import (
	"context"
)

const createEveRace = `-- name: CreateEveRace :one
INSERT INTO eve_races (
    id,
    description,
    name
)
VALUES (
    ?, ?, ?
)
RETURNING id, description, name
`

type CreateEveRaceParams struct {
	ID          int64
	Description string
	Name        string
}

func (q *Queries) CreateEveRace(ctx context.Context, arg CreateEveRaceParams) (EveRace, error) {
	row := q.db.QueryRowContext(ctx, createEveRace, arg.ID, arg.Description, arg.Name)
	var i EveRace
	err := row.Scan(&i.ID, &i.Description, &i.Name)
	return i, err
}

const getEveRace = `-- name: GetEveRace :one
SELECT id, description, name
FROM eve_races
WHERE id = ?
`

func (q *Queries) GetEveRace(ctx context.Context, id int64) (EveRace, error) {
	row := q.db.QueryRowContext(ctx, getEveRace, id)
	var i EveRace
	err := row.Scan(&i.ID, &i.Description, &i.Name)
	return i, err
}

const listEveRaceIDs = `-- name: ListEveRaceIDs :many
SELECT id
FROM eve_races
`

func (q *Queries) ListEveRaceIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listEveRaceIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
