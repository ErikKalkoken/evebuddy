// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: character_mail_labels.sql

package queries

import (
	"context"
	"strings"
)

const createCharacterMailLabel = `-- name: CreateCharacterMailLabel :one
INSERT INTO character_mail_labels (
    color,
    name,
    unread_count,
    character_id,
    label_id
)
VALUES (
    ?, ?, ?, ?, ?
)
RETURNING id, character_id, color, label_id, name, unread_count
`

type CreateCharacterMailLabelParams struct {
	Color       string
	Name        string
	UnreadCount int64
	CharacterID int64
	LabelID     int64
}

func (q *Queries) CreateCharacterMailLabel(ctx context.Context, arg CreateCharacterMailLabelParams) (CharacterMailLabel, error) {
	row := q.db.QueryRowContext(ctx, createCharacterMailLabel,
		arg.Color,
		arg.Name,
		arg.UnreadCount,
		arg.CharacterID,
		arg.LabelID,
	)
	var i CharacterMailLabel
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.Color,
		&i.LabelID,
		&i.Name,
		&i.UnreadCount,
	)
	return i, err
}

const deleteObsoleteCharacterMailLabels = `-- name: DeleteObsoleteCharacterMailLabels :exec
DELETE FROM character_mail_labels
WHERE character_mail_labels.character_id = ?
AND id NOT IN (
    SELECT character_mail_label_id
    FROM character_mail_mail_labels
    JOIN character_mails ON character_mails.id = character_mail_mail_labels.character_mail_id
    WHERE character_mail_labels.character_id = ?
)
`

type DeleteObsoleteCharacterMailLabelsParams struct {
	CharacterID   int64
	CharacterID_2 int64
}

func (q *Queries) DeleteObsoleteCharacterMailLabels(ctx context.Context, arg DeleteObsoleteCharacterMailLabelsParams) error {
	_, err := q.db.ExecContext(ctx, deleteObsoleteCharacterMailLabels, arg.CharacterID, arg.CharacterID_2)
	return err
}

const getCharacterMailLabel = `-- name: GetCharacterMailLabel :one
SELECT id, character_id, color, label_id, name, unread_count
FROM character_mail_labels
WHERE character_id = ? AND label_id = ?
`

type GetCharacterMailLabelParams struct {
	CharacterID int64
	LabelID     int64
}

func (q *Queries) GetCharacterMailLabel(ctx context.Context, arg GetCharacterMailLabelParams) (CharacterMailLabel, error) {
	row := q.db.QueryRowContext(ctx, getCharacterMailLabel, arg.CharacterID, arg.LabelID)
	var i CharacterMailLabel
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.Color,
		&i.LabelID,
		&i.Name,
		&i.UnreadCount,
	)
	return i, err
}

const listCharacterMailLabelsByIDs = `-- name: ListCharacterMailLabelsByIDs :many
SELECT id, character_id, color, label_id, name, unread_count
FROM character_mail_labels
WHERE character_id = ? AND label_id IN (/*SLICE:ids*/?)
`

type ListCharacterMailLabelsByIDsParams struct {
	CharacterID int64
	Ids         []int64
}

func (q *Queries) ListCharacterMailLabelsByIDs(ctx context.Context, arg ListCharacterMailLabelsByIDsParams) ([]CharacterMailLabel, error) {
	query := listCharacterMailLabelsByIDs
	var queryParams []interface{}
	queryParams = append(queryParams, arg.CharacterID)
	if len(arg.Ids) > 0 {
		for _, v := range arg.Ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(arg.Ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterMailLabel
	for rows.Next() {
		var i CharacterMailLabel
		if err := rows.Scan(
			&i.ID,
			&i.CharacterID,
			&i.Color,
			&i.LabelID,
			&i.Name,
			&i.UnreadCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCharacterMailLabelsOrdered = `-- name: ListCharacterMailLabelsOrdered :many
SELECT id, character_id, color, label_id, name, unread_count
FROM character_mail_labels
WHERE character_id = ?
AND label_id > 8
ORDER BY name
`

func (q *Queries) ListCharacterMailLabelsOrdered(ctx context.Context, characterID int64) ([]CharacterMailLabel, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterMailLabelsOrdered, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CharacterMailLabel
	for rows.Next() {
		var i CharacterMailLabel
		if err := rows.Scan(
			&i.ID,
			&i.CharacterID,
			&i.Color,
			&i.LabelID,
			&i.Name,
			&i.UnreadCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateCharacterMailLabel = `-- name: UpdateOrCreateCharacterMailLabel :one
INSERT INTO character_mail_labels (
    character_id,
    label_id,
    color,
    name,
    unread_count
)
VALUES (
    ?1, ?2, ?3, ?4, ?5
)
ON CONFLICT(character_id, label_id) DO
UPDATE SET
    color = ?3,
    name = ?4,
    unread_count = ?5
WHERE character_id = ?1
AND label_id = ?2
RETURNING id, character_id, color, label_id, name, unread_count
`

type UpdateOrCreateCharacterMailLabelParams struct {
	CharacterID int64
	LabelID     int64
	Color       string
	Name        string
	UnreadCount int64
}

func (q *Queries) UpdateOrCreateCharacterMailLabel(ctx context.Context, arg UpdateOrCreateCharacterMailLabelParams) (CharacterMailLabel, error) {
	row := q.db.QueryRowContext(ctx, updateOrCreateCharacterMailLabel,
		arg.CharacterID,
		arg.LabelID,
		arg.Color,
		arg.Name,
		arg.UnreadCount,
	)
	var i CharacterMailLabel
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.Color,
		&i.LabelID,
		&i.Name,
		&i.UnreadCount,
	)
	return i, err
}
