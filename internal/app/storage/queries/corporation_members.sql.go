// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: corporation_members.sql

package queries

import (
	"context"
	"strings"
)

const createCorporationMember = `-- name: CreateCorporationMember :exec
INSERT INTO
    corporation_members (corporation_id, character_id)
VALUES
    (?, ?)
`

type CreateCorporationMemberParams struct {
	CorporationID int64
	CharacterID   int64
}

func (q *Queries) CreateCorporationMember(ctx context.Context, arg CreateCorporationMemberParams) error {
	_, err := q.db.ExecContext(ctx, createCorporationMember, arg.CorporationID, arg.CharacterID)
	return err
}

const deleteCorporationMembers = `-- name: DeleteCorporationMembers :exec
DELETE FROM corporation_members
WHERE
    corporation_id = ?
    AND character_id IN (/*SLICE:character_ids*/?)
`

type DeleteCorporationMembersParams struct {
	CorporationID int64
	CharacterIds  []int64
}

func (q *Queries) DeleteCorporationMembers(ctx context.Context, arg DeleteCorporationMembersParams) error {
	query := deleteCorporationMembers
	var queryParams []interface{}
	queryParams = append(queryParams, arg.CorporationID)
	if len(arg.CharacterIds) > 0 {
		for _, v := range arg.CharacterIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:character_ids*/?", strings.Repeat(",?", len(arg.CharacterIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:character_ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getCorporationMembers = `-- name: GetCorporationMembers :one
SELECT
    cm.id, cm.corporation_id, cm.character_id,
    ee.id, ee.category, ee.name
FROM
    corporation_members cm
    JOIN eve_entities ee ON ee.id = cm.character_id
WHERE
    cm.corporation_id = ?
    AND cm.character_id = ?
`

type GetCorporationMembersParams struct {
	CorporationID int64
	CharacterID   int64
}

type GetCorporationMembersRow struct {
	CorporationMember CorporationMember
	EveEntity         EveEntity
}

func (q *Queries) GetCorporationMembers(ctx context.Context, arg GetCorporationMembersParams) (GetCorporationMembersRow, error) {
	row := q.db.QueryRowContext(ctx, getCorporationMembers, arg.CorporationID, arg.CharacterID)
	var i GetCorporationMembersRow
	err := row.Scan(
		&i.CorporationMember.ID,
		&i.CorporationMember.CorporationID,
		&i.CorporationMember.CharacterID,
		&i.EveEntity.ID,
		&i.EveEntity.Category,
		&i.EveEntity.Name,
	)
	return i, err
}

const listCorporationMemberIDs = `-- name: ListCorporationMemberIDs :many
SELECT
    character_id
FROM
    corporation_members
WHERE
    corporation_id = ?
`

func (q *Queries) ListCorporationMemberIDs(ctx context.Context, corporationID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listCorporationMemberIDs, corporationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var character_id int64
		if err := rows.Scan(&character_id); err != nil {
			return nil, err
		}
		items = append(items, character_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCorporationMembers = `-- name: ListCorporationMembers :many
SELECT
    cm.id, cm.corporation_id, cm.character_id,
    ee.id, ee.category, ee.name
FROM
    corporation_members cm
    JOIN eve_entities ee ON ee.id = cm.character_id
WHERE
    cm.corporation_id = ?
`

type ListCorporationMembersRow struct {
	CorporationMember CorporationMember
	EveEntity         EveEntity
}

func (q *Queries) ListCorporationMembers(ctx context.Context, corporationID int64) ([]ListCorporationMembersRow, error) {
	rows, err := q.db.QueryContext(ctx, listCorporationMembers, corporationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCorporationMembersRow
	for rows.Next() {
		var i ListCorporationMembersRow
		if err := rows.Scan(
			&i.CorporationMember.ID,
			&i.CorporationMember.CorporationID,
			&i.CorporationMember.CharacterID,
			&i.EveEntity.ID,
			&i.EveEntity.Category,
			&i.EveEntity.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
