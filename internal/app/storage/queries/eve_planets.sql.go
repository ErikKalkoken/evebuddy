// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: eve_planets.sql

package queries

import (
	"context"
)

const createEvePlanet = `-- name: CreateEvePlanet :exec
INSERT INTO
    eve_planets (id, name, eve_solar_system_id, eve_type_id)
VALUES
    (?, ?, ?, ?)
`

type CreateEvePlanetParams struct {
	ID               int64
	Name             string
	EveSolarSystemID int64
	EveTypeID        int64
}

func (q *Queries) CreateEvePlanet(ctx context.Context, arg CreateEvePlanetParams) error {
	_, err := q.db.ExecContext(ctx, createEvePlanet,
		arg.ID,
		arg.Name,
		arg.EveSolarSystemID,
		arg.EveTypeID,
	)
	return err
}

const getEvePlanet = `-- name: GetEvePlanet :one
SELECT
    ep.id, ep.name, ep.eve_solar_system_id, ep.eve_type_id,
    ess.id, ess.eve_constellation_id, ess.name, ess.security_status,
    ecn.id, ecn.eve_region_id, ecn.name,
    er.id, er.description, er.name,
    et.id, et.eve_group_id, et.capacity, et.description, et.graphic_id, et.icon_id, et.is_published, et.market_group_id, et.mass, et.name, et.packaged_volume, et.portion_size, et.radius, et.volume,
    eg.id, eg.eve_category_id, eg.name, eg.is_published,
    ect.id, ect.name, ect.is_published
FROM
    eve_planets ep
    JOIN eve_solar_systems ess ON ess.id = ep.eve_solar_system_id
    JOIN eve_constellations ecn ON ecn.id = ess.eve_constellation_id
    JOIN eve_regions er ON er.id = ecn.eve_region_id
    JOIN eve_types et ON et.id = ep.eve_type_id
    JOIN eve_groups eg ON eg.id = et.eve_group_id
    JOIN eve_categories ect ON ect.id = eg.eve_category_id
WHERE
    ep.id = ?
`

type GetEvePlanetRow struct {
	EvePlanet        EvePlanet
	EveSolarSystem   EveSolarSystem
	EveConstellation EveConstellation
	EveRegion        EveRegion
	EveType          EveType
	EveGroup         EveGroup
	EveCategory      EveCategory
}

func (q *Queries) GetEvePlanet(ctx context.Context, id int64) (GetEvePlanetRow, error) {
	row := q.db.QueryRowContext(ctx, getEvePlanet, id)
	var i GetEvePlanetRow
	err := row.Scan(
		&i.EvePlanet.ID,
		&i.EvePlanet.Name,
		&i.EvePlanet.EveSolarSystemID,
		&i.EvePlanet.EveTypeID,
		&i.EveSolarSystem.ID,
		&i.EveSolarSystem.EveConstellationID,
		&i.EveSolarSystem.Name,
		&i.EveSolarSystem.SecurityStatus,
		&i.EveConstellation.ID,
		&i.EveConstellation.EveRegionID,
		&i.EveConstellation.Name,
		&i.EveRegion.ID,
		&i.EveRegion.Description,
		&i.EveRegion.Name,
		&i.EveType.ID,
		&i.EveType.EveGroupID,
		&i.EveType.Capacity,
		&i.EveType.Description,
		&i.EveType.GraphicID,
		&i.EveType.IconID,
		&i.EveType.IsPublished,
		&i.EveType.MarketGroupID,
		&i.EveType.Mass,
		&i.EveType.Name,
		&i.EveType.PackagedVolume,
		&i.EveType.PortionSize,
		&i.EveType.Radius,
		&i.EveType.Volume,
		&i.EveGroup.ID,
		&i.EveGroup.EveCategoryID,
		&i.EveGroup.Name,
		&i.EveGroup.IsPublished,
		&i.EveCategory.ID,
		&i.EveCategory.Name,
		&i.EveCategory.IsPublished,
	)
	return i, err
}
