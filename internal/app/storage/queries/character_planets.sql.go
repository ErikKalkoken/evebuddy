// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: character_planets.sql

package queries

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const createCharacterPlanet = `-- name: CreateCharacterPlanet :one
INSERT INTO
    character_planets (
        character_id,
        eve_planet_id,
        last_notified,
        last_update,
        upgrade_level
    )
VALUES
    (?1, ?2, ?3, ?4, ?5) RETURNING id
`

type CreateCharacterPlanetParams struct {
	CharacterID  int64
	EvePlanetID  int64
	LastNotified sql.NullTime
	LastUpdate   time.Time
	UpgradeLevel int64
}

func (q *Queries) CreateCharacterPlanet(ctx context.Context, arg CreateCharacterPlanetParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createCharacterPlanet,
		arg.CharacterID,
		arg.EvePlanetID,
		arg.LastNotified,
		arg.LastUpdate,
		arg.UpgradeLevel,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteCharacterPlanets = `-- name: DeleteCharacterPlanets :exec
DELETE FROM
    character_planets
WHERE
    character_id = ?
    AND eve_planet_id IN (/*SLICE:eve_planet_ids*/?)
`

type DeleteCharacterPlanetsParams struct {
	CharacterID  int64
	EvePlanetIds []int64
}

func (q *Queries) DeleteCharacterPlanets(ctx context.Context, arg DeleteCharacterPlanetsParams) error {
	query := deleteCharacterPlanets
	var queryParams []interface{}
	queryParams = append(queryParams, arg.CharacterID)
	if len(arg.EvePlanetIds) > 0 {
		for _, v := range arg.EvePlanetIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:eve_planet_ids*/?", strings.Repeat(",?", len(arg.EvePlanetIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:eve_planet_ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getCharacterPlanet = `-- name: GetCharacterPlanet :one
SELECT
    cp.id, cp.character_id, cp.eve_planet_id, cp.last_update, cp.last_notified, cp.upgrade_level,
    ep.id, ep.name, ep.eve_solar_system_id, ep.eve_type_id,
    et.id, et.eve_group_id, et.capacity, et.description, et.graphic_id, et.icon_id, et.is_published, et.market_group_id, et.mass, et.name, et.packaged_volume, et.portion_size, et.radius, et.volume,
    eg.id, eg.eve_category_id, eg.name, eg.is_published,
    ect.id, ect.name, ect.is_published,
    ess.id, ess.eve_constellation_id, ess.name, ess.security_status,
    ecs.id, ecs.eve_region_id, ecs.name,
    er.id, er.description, er.name
FROM
    character_planets cp
    JOIN eve_planets ep ON ep.id = cp.eve_planet_id
    JOIN eve_types et ON et.id = ep.eve_type_id
    JOIN eve_groups eg ON eg.id = et.eve_group_id
    JOIN eve_categories ect ON ect.id = eg.eve_category_id
    JOIN eve_solar_systems ess ON ess.id = ep.eve_solar_system_id
    JOIN eve_constellations ecs ON ecs.id = ess.eve_constellation_id
    JOIN eve_regions er ON er.id = ecs.eve_region_id
WHERE
    character_id = ?
    AND eve_planet_id = ?
`

type GetCharacterPlanetParams struct {
	CharacterID int64
	EvePlanetID int64
}

type GetCharacterPlanetRow struct {
	CharacterPlanet  CharacterPlanet
	EvePlanet        EvePlanet
	EveType          EveType
	EveGroup         EveGroup
	EveCategory      EveCategory
	EveSolarSystem   EveSolarSystem
	EveConstellation EveConstellation
	EveRegion        EveRegion
}

func (q *Queries) GetCharacterPlanet(ctx context.Context, arg GetCharacterPlanetParams) (GetCharacterPlanetRow, error) {
	row := q.db.QueryRowContext(ctx, getCharacterPlanet, arg.CharacterID, arg.EvePlanetID)
	var i GetCharacterPlanetRow
	err := row.Scan(
		&i.CharacterPlanet.ID,
		&i.CharacterPlanet.CharacterID,
		&i.CharacterPlanet.EvePlanetID,
		&i.CharacterPlanet.LastUpdate,
		&i.CharacterPlanet.LastNotified,
		&i.CharacterPlanet.UpgradeLevel,
		&i.EvePlanet.ID,
		&i.EvePlanet.Name,
		&i.EvePlanet.EveSolarSystemID,
		&i.EvePlanet.EveTypeID,
		&i.EveType.ID,
		&i.EveType.EveGroupID,
		&i.EveType.Capacity,
		&i.EveType.Description,
		&i.EveType.GraphicID,
		&i.EveType.IconID,
		&i.EveType.IsPublished,
		&i.EveType.MarketGroupID,
		&i.EveType.Mass,
		&i.EveType.Name,
		&i.EveType.PackagedVolume,
		&i.EveType.PortionSize,
		&i.EveType.Radius,
		&i.EveType.Volume,
		&i.EveGroup.ID,
		&i.EveGroup.EveCategoryID,
		&i.EveGroup.Name,
		&i.EveGroup.IsPublished,
		&i.EveCategory.ID,
		&i.EveCategory.Name,
		&i.EveCategory.IsPublished,
		&i.EveSolarSystem.ID,
		&i.EveSolarSystem.EveConstellationID,
		&i.EveSolarSystem.Name,
		&i.EveSolarSystem.SecurityStatus,
		&i.EveConstellation.ID,
		&i.EveConstellation.EveRegionID,
		&i.EveConstellation.Name,
		&i.EveRegion.ID,
		&i.EveRegion.Description,
		&i.EveRegion.Name,
	)
	return i, err
}

const listCharacterPlanets = `-- name: ListCharacterPlanets :many
SELECT
    cp.id, cp.character_id, cp.eve_planet_id, cp.last_update, cp.last_notified, cp.upgrade_level,
    ep.id, ep.name, ep.eve_solar_system_id, ep.eve_type_id,
    et.id, et.eve_group_id, et.capacity, et.description, et.graphic_id, et.icon_id, et.is_published, et.market_group_id, et.mass, et.name, et.packaged_volume, et.portion_size, et.radius, et.volume,
    eg.id, eg.eve_category_id, eg.name, eg.is_published,
    ect.id, ect.name, ect.is_published,
    ess.id, ess.eve_constellation_id, ess.name, ess.security_status,
    ecs.id, ecs.eve_region_id, ecs.name,
    er.id, er.description, er.name
FROM
    character_planets cp
    JOIN eve_planets ep ON ep.id = cp.eve_planet_id
    JOIN eve_types et ON et.id = ep.eve_type_id
    JOIN eve_groups eg ON eg.id = et.eve_group_id
    JOIN eve_categories ect ON ect.id = eg.eve_category_id
    JOIN eve_solar_systems ess ON ess.id = ep.eve_solar_system_id
    JOIN eve_constellations ecs ON ecs.id = ess.eve_constellation_id
    JOIN eve_regions er ON er.id = ecs.eve_region_id
WHERE
    character_id = ?
ORDER BY
    ep.name
`

type ListCharacterPlanetsRow struct {
	CharacterPlanet  CharacterPlanet
	EvePlanet        EvePlanet
	EveType          EveType
	EveGroup         EveGroup
	EveCategory      EveCategory
	EveSolarSystem   EveSolarSystem
	EveConstellation EveConstellation
	EveRegion        EveRegion
}

func (q *Queries) ListCharacterPlanets(ctx context.Context, characterID int64) ([]ListCharacterPlanetsRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharacterPlanets, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharacterPlanetsRow
	for rows.Next() {
		var i ListCharacterPlanetsRow
		if err := rows.Scan(
			&i.CharacterPlanet.ID,
			&i.CharacterPlanet.CharacterID,
			&i.CharacterPlanet.EvePlanetID,
			&i.CharacterPlanet.LastUpdate,
			&i.CharacterPlanet.LastNotified,
			&i.CharacterPlanet.UpgradeLevel,
			&i.EvePlanet.ID,
			&i.EvePlanet.Name,
			&i.EvePlanet.EveSolarSystemID,
			&i.EvePlanet.EveTypeID,
			&i.EveType.ID,
			&i.EveType.EveGroupID,
			&i.EveType.Capacity,
			&i.EveType.Description,
			&i.EveType.GraphicID,
			&i.EveType.IconID,
			&i.EveType.IsPublished,
			&i.EveType.MarketGroupID,
			&i.EveType.Mass,
			&i.EveType.Name,
			&i.EveType.PackagedVolume,
			&i.EveType.PortionSize,
			&i.EveType.Radius,
			&i.EveType.Volume,
			&i.EveGroup.ID,
			&i.EveGroup.EveCategoryID,
			&i.EveGroup.Name,
			&i.EveGroup.IsPublished,
			&i.EveCategory.ID,
			&i.EveCategory.Name,
			&i.EveCategory.IsPublished,
			&i.EveSolarSystem.ID,
			&i.EveSolarSystem.EveConstellationID,
			&i.EveSolarSystem.Name,
			&i.EveSolarSystem.SecurityStatus,
			&i.EveConstellation.ID,
			&i.EveConstellation.EveRegionID,
			&i.EveConstellation.Name,
			&i.EveRegion.ID,
			&i.EveRegion.Description,
			&i.EveRegion.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateCharacterPlanet = `-- name: UpdateOrCreateCharacterPlanet :one
INSERT INTO
    character_planets (
        character_id,
        eve_planet_id,
        last_update,
        upgrade_level
    )
VALUES
    (?1, ?2, ?3, ?4) ON CONFLICT(character_id, eve_planet_id) DO
UPDATE
SET
    last_update = ?3,
    upgrade_level = ?4
WHERE
    character_id = ?1
    AND eve_planet_id = ?2 RETURNING id
`

type UpdateOrCreateCharacterPlanetParams struct {
	CharacterID  int64
	EvePlanetID  int64
	LastUpdate   time.Time
	UpgradeLevel int64
}

func (q *Queries) UpdateOrCreateCharacterPlanet(ctx context.Context, arg UpdateOrCreateCharacterPlanetParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateOrCreateCharacterPlanet,
		arg.CharacterID,
		arg.EvePlanetID,
		arg.LastUpdate,
		arg.UpgradeLevel,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
