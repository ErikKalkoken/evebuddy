// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: corporation_structure_services.sql

package queries

import (
	"context"
)

const createStructureService = `-- name: CreateStructureService :exec
INSERT INTO
    corporation_structure_services (corporation_structure_id, name, state)
VALUES
    (?, ?, ?)
`

type CreateStructureServiceParams struct {
	CorporationStructureID int64
	Name                   string
	State                  string
}

func (q *Queries) CreateStructureService(ctx context.Context, arg CreateStructureServiceParams) error {
	_, err := q.db.ExecContext(ctx, createStructureService, arg.CorporationStructureID, arg.Name, arg.State)
	return err
}

const deleteStructureServices = `-- name: DeleteStructureServices :exec
DELETE FROM corporation_structure_services
WHERE
    corporation_structure_id = ?
`

func (q *Queries) DeleteStructureServices(ctx context.Context, corporationStructureID int64) error {
	_, err := q.db.ExecContext(ctx, deleteStructureServices, corporationStructureID)
	return err
}

const getStructureService = `-- name: GetStructureService :one
SELECT
    id, corporation_structure_id, name, state
FROM
    corporation_structure_services
WHERE
    corporation_structure_id = ?
    AND name = ?
`

type GetStructureServiceParams struct {
	CorporationStructureID int64
	Name                   string
}

func (q *Queries) GetStructureService(ctx context.Context, arg GetStructureServiceParams) (CorporationStructureService, error) {
	row := q.db.QueryRowContext(ctx, getStructureService, arg.CorporationStructureID, arg.Name)
	var i CorporationStructureService
	err := row.Scan(
		&i.ID,
		&i.CorporationStructureID,
		&i.Name,
		&i.State,
	)
	return i, err
}

const listStructureServices = `-- name: ListStructureServices :many
SELECT
    id, corporation_structure_id, name, state
FROM
    corporation_structure_services
WHERE
    corporation_structure_id = ?
`

func (q *Queries) ListStructureServices(ctx context.Context, corporationStructureID int64) ([]CorporationStructureService, error) {
	rows, err := q.db.QueryContext(ctx, listStructureServices, corporationStructureID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CorporationStructureService
	for rows.Next() {
		var i CorporationStructureService
		if err := rows.Scan(
			&i.ID,
			&i.CorporationStructureID,
			&i.Name,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
