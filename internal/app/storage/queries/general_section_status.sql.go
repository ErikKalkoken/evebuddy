// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: general_section_status.sql

package queries

import (
	"context"
	"database/sql"
	"time"
)

const getGeneralSectionStatus = `-- name: GetGeneralSectionStatus :one
SELECT
    id, section_id, created_at, updated_at, content_hash, completed_at, error, started_at
FROM
    general_section_status
WHERE
    section_id = ?
`

func (q *Queries) GetGeneralSectionStatus(ctx context.Context, sectionID string) (GeneralSectionStatus, error) {
	row := q.db.QueryRowContext(ctx, getGeneralSectionStatus, sectionID)
	var i GeneralSectionStatus
	err := row.Scan(
		&i.ID,
		&i.SectionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ContentHash,
		&i.CompletedAt,
		&i.Error,
		&i.StartedAt,
	)
	return i, err
}

const listGeneralSectionStatus = `-- name: ListGeneralSectionStatus :many
SELECT
    id, section_id, created_at, updated_at, content_hash, completed_at, error, started_at
FROM
    general_section_status
`

func (q *Queries) ListGeneralSectionStatus(ctx context.Context) ([]GeneralSectionStatus, error) {
	rows, err := q.db.QueryContext(ctx, listGeneralSectionStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GeneralSectionStatus
	for rows.Next() {
		var i GeneralSectionStatus
		if err := rows.Scan(
			&i.ID,
			&i.SectionID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ContentHash,
			&i.CompletedAt,
			&i.Error,
			&i.StartedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateGeneralSectionStatus = `-- name: UpdateOrCreateGeneralSectionStatus :one
INSERT INTO
    general_section_status (
        section_id,
        completed_at,
        content_hash,
        error,
        started_at,
        updated_at
    )
VALUES
    (?1, ?2, ?3, ?4, ?5, ?6)
ON CONFLICT (section_id) DO UPDATE
SET
    completed_at = ?2,
    content_hash = ?3,
    error = ?4,
    started_at = ?5,
    updated_at = ?6
RETURNING id, section_id, created_at, updated_at, content_hash, completed_at, error, started_at
`

type UpdateOrCreateGeneralSectionStatusParams struct {
	SectionID   string
	CompletedAt sql.NullTime
	ContentHash string
	Error       string
	StartedAt   sql.NullTime
	UpdatedAt   time.Time
}

func (q *Queries) UpdateOrCreateGeneralSectionStatus(ctx context.Context, arg UpdateOrCreateGeneralSectionStatusParams) (GeneralSectionStatus, error) {
	row := q.db.QueryRowContext(ctx, updateOrCreateGeneralSectionStatus,
		arg.SectionID,
		arg.CompletedAt,
		arg.ContentHash,
		arg.Error,
		arg.StartedAt,
		arg.UpdatedAt,
	)
	var i GeneralSectionStatus
	err := row.Scan(
		&i.ID,
		&i.SectionID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ContentHash,
		&i.CompletedAt,
		&i.Error,
		&i.StartedAt,
	)
	return i, err
}
