// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: tags.sql

package queries

import (
	"context"
)

const createCharacterTag = `-- name: CreateCharacterTag :exec
INSERT INTO
    characters_tags (character_id, tag_id)
VALUES
    (?, ?)
`

type CreateCharacterTagParams struct {
	CharacterID int64
	TagID       int64
}

func (q *Queries) CreateCharacterTag(ctx context.Context, arg CreateCharacterTagParams) error {
	_, err := q.db.ExecContext(ctx, createCharacterTag, arg.CharacterID, arg.TagID)
	return err
}

const createTag = `-- name: CreateTag :one
INSERT INTO
    tags (name, description)
VALUES
    (?, ?) RETURNING id, name, description
`

type CreateTagParams struct {
	Name        string
	Description string
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (Tag, error) {
	row := q.db.QueryRowContext(ctx, createTag, arg.Name, arg.Description)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteCharacterTag = `-- name: DeleteCharacterTag :exec
DELETE FROM characters_tags
WHERE
    character_id = ?
    AND tag_id = ?
`

type DeleteCharacterTagParams struct {
	CharacterID int64
	TagID       int64
}

func (q *Queries) DeleteCharacterTag(ctx context.Context, arg DeleteCharacterTagParams) error {
	_, err := q.db.ExecContext(ctx, deleteCharacterTag, arg.CharacterID, arg.TagID)
	return err
}

const deleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE
    id = ?
`

func (q *Queries) DeleteTag(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTag, id)
	return err
}

const getTag = `-- name: GetTag :one
SELECT
    id, name, description
FROM
    tags
WHERE
    id = ?
`

func (q *Queries) GetTag(ctx context.Context, id int64) (Tag, error) {
	row := q.db.QueryRowContext(ctx, getTag, id)
	var i Tag
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listCharactersForTag = `-- name: ListCharactersForTag :many
SELECT
    ec.id, ec.name
FROM
    characters_tags ct
    JOIN characters c ON c.id = ct.character_id
    JOIN eve_characters ec ON ec.id = c.id
WHERE
    ct.tag_id = ?
ORDER BY
    ec.name
`

type ListCharactersForTagRow struct {
	ID   int64
	Name string
}

func (q *Queries) ListCharactersForTag(ctx context.Context, tagID int64) ([]ListCharactersForTagRow, error) {
	rows, err := q.db.QueryContext(ctx, listCharactersForTag, tagID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCharactersForTagRow
	for rows.Next() {
		var i ListCharactersForTagRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsByName = `-- name: ListTagsByName :many
SELECT
    id, name, description
FROM
    tags
ORDER BY
    name
`

func (q *Queries) ListTagsByName(ctx context.Context) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTagsByName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTagsForCharacter = `-- name: ListTagsForCharacter :many
SELECT
    t.id, t.name, t.description
FROM
    characters_tags ct
    JOIN tags t ON t.id = ct.tag_id
WHERE
    ct.character_id = ?
ORDER BY
    t.name
`

func (q *Queries) ListTagsForCharacter(ctx context.Context, characterID int64) ([]Tag, error) {
	rows, err := q.db.QueryContext(ctx, listTagsForCharacter, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tag
	for rows.Next() {
		var i Tag
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTagDescription = `-- name: UpdateTagDescription :exec
UPDATE tags
SET
    description = ?
WHERE
    id = ?
`

type UpdateTagDescriptionParams struct {
	Description string
	ID          int64
}

func (q *Queries) UpdateTagDescription(ctx context.Context, arg UpdateTagDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateTagDescription, arg.Description, arg.ID)
	return err
}

const updateTagName = `-- name: UpdateTagName :exec
UPDATE tags
SET
    name = ?
WHERE
    id = ?
`

type UpdateTagNameParams struct {
	Name string
	ID   int64
}

func (q *Queries) UpdateTagName(ctx context.Context, arg UpdateTagNameParams) error {
	_, err := q.db.ExecContext(ctx, updateTagName, arg.Name, arg.ID)
	return err
}
