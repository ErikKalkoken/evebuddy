// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: corporation_structures.sql

package queries

import (
	"context"
	"database/sql"
	"strings"
)

const deleteCorporationStructures = `-- name: DeleteCorporationStructures :exec
DELETE FROM corporation_structures
WHERE
    corporation_id = ?
    AND structure_id IN (/*SLICE:structure_ids*/?)
`

type DeleteCorporationStructuresParams struct {
	CorporationID int64
	StructureIds  []int64
}

func (q *Queries) DeleteCorporationStructures(ctx context.Context, arg DeleteCorporationStructuresParams) error {
	query := deleteCorporationStructures
	var queryParams []interface{}
	queryParams = append(queryParams, arg.CorporationID)
	if len(arg.StructureIds) > 0 {
		for _, v := range arg.StructureIds {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:structure_ids*/?", strings.Repeat(",?", len(arg.StructureIds))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:structure_ids*/?", "NULL", 1)
	}
	_, err := q.db.ExecContext(ctx, query, queryParams...)
	return err
}

const getCorporationStructure = `-- name: GetCorporationStructure :one
SELECT
    cs.id, cs.corporation_id, cs.fuel_expires, cs.name, cs.next_reinforce_apply, cs.next_reinforce_hour, cs.profile_id, cs.reinforce_hour, cs.state, cs.state_timer_end, cs.state_timer_start, cs.structure_id, cs.system_id, cs.type_id, cs.unanchors_at,
    ess.id, ess.eve_constellation_id, ess.name, ess.security_status,
    ecn.id, ecn.eve_region_id, ecn.name,
    er.id, er.description, er.name,
    et.id, et.eve_group_id, et.capacity, et.description, et.graphic_id, et.icon_id, et.is_published, et.market_group_id, et.mass, et.name, et.packaged_volume, et.portion_size, et.radius, et.volume,
    eg.id, eg.eve_category_id, eg.name, eg.is_published,
    ect.id, ect.name, ect.is_published
FROM
    corporation_structures cs
    JOIN eve_solar_systems ess ON ess.ID = cs.system_id
    JOIN eve_constellations ecn ON ecn.ID = ess.eve_constellation_id
    JOIN eve_regions er ON er.ID = ecn.eve_region_id
    JOIN eve_types et ON et.ID = cs.type_id
    JOIN eve_groups eg on eg.id = et.eve_group_id
    JOIN eve_categories ect on ect.id = eg.eve_category_id
WHERE
    corporation_id = ?
    AND structure_id = ?
`

type GetCorporationStructureParams struct {
	CorporationID int64
	StructureID   int64
}

type GetCorporationStructureRow struct {
	CorporationStructure CorporationStructure
	EveSolarSystem       EveSolarSystem
	EveConstellation     EveConstellation
	EveRegion            EveRegion
	EveType              EveType
	EveGroup             EveGroup
	EveCategory          EveCategory
}

func (q *Queries) GetCorporationStructure(ctx context.Context, arg GetCorporationStructureParams) (GetCorporationStructureRow, error) {
	row := q.db.QueryRowContext(ctx, getCorporationStructure, arg.CorporationID, arg.StructureID)
	var i GetCorporationStructureRow
	err := row.Scan(
		&i.CorporationStructure.ID,
		&i.CorporationStructure.CorporationID,
		&i.CorporationStructure.FuelExpires,
		&i.CorporationStructure.Name,
		&i.CorporationStructure.NextReinforceApply,
		&i.CorporationStructure.NextReinforceHour,
		&i.CorporationStructure.ProfileID,
		&i.CorporationStructure.ReinforceHour,
		&i.CorporationStructure.State,
		&i.CorporationStructure.StateTimerEnd,
		&i.CorporationStructure.StateTimerStart,
		&i.CorporationStructure.StructureID,
		&i.CorporationStructure.SystemID,
		&i.CorporationStructure.TypeID,
		&i.CorporationStructure.UnanchorsAt,
		&i.EveSolarSystem.ID,
		&i.EveSolarSystem.EveConstellationID,
		&i.EveSolarSystem.Name,
		&i.EveSolarSystem.SecurityStatus,
		&i.EveConstellation.ID,
		&i.EveConstellation.EveRegionID,
		&i.EveConstellation.Name,
		&i.EveRegion.ID,
		&i.EveRegion.Description,
		&i.EveRegion.Name,
		&i.EveType.ID,
		&i.EveType.EveGroupID,
		&i.EveType.Capacity,
		&i.EveType.Description,
		&i.EveType.GraphicID,
		&i.EveType.IconID,
		&i.EveType.IsPublished,
		&i.EveType.MarketGroupID,
		&i.EveType.Mass,
		&i.EveType.Name,
		&i.EveType.PackagedVolume,
		&i.EveType.PortionSize,
		&i.EveType.Radius,
		&i.EveType.Volume,
		&i.EveGroup.ID,
		&i.EveGroup.EveCategoryID,
		&i.EveGroup.Name,
		&i.EveGroup.IsPublished,
		&i.EveCategory.ID,
		&i.EveCategory.Name,
		&i.EveCategory.IsPublished,
	)
	return i, err
}

const listCorporationStructureIDs = `-- name: ListCorporationStructureIDs :many
SELECT
    structure_id
FROM
    corporation_structures
WHERE
    corporation_id = ?
`

func (q *Queries) ListCorporationStructureIDs(ctx context.Context, corporationID int64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listCorporationStructureIDs, corporationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var structure_id int64
		if err := rows.Scan(&structure_id); err != nil {
			return nil, err
		}
		items = append(items, structure_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCorporationStructures = `-- name: ListCorporationStructures :many
SELECT
    cs.id, cs.corporation_id, cs.fuel_expires, cs.name, cs.next_reinforce_apply, cs.next_reinforce_hour, cs.profile_id, cs.reinforce_hour, cs.state, cs.state_timer_end, cs.state_timer_start, cs.structure_id, cs.system_id, cs.type_id, cs.unanchors_at,
    ess.id, ess.eve_constellation_id, ess.name, ess.security_status,
    ecn.id, ecn.eve_region_id, ecn.name,
    er.id, er.description, er.name,
    et.id, et.eve_group_id, et.capacity, et.description, et.graphic_id, et.icon_id, et.is_published, et.market_group_id, et.mass, et.name, et.packaged_volume, et.portion_size, et.radius, et.volume,
    eg.id, eg.eve_category_id, eg.name, eg.is_published,
    ect.id, ect.name, ect.is_published
FROM
    corporation_structures cs
    JOIN eve_solar_systems ess ON ess.ID = cs.system_id
    JOIN eve_constellations ecn ON ecn.ID = ess.eve_constellation_id
    JOIN eve_regions er ON er.ID = ecn.eve_region_id
    JOIN eve_types et ON et.ID = cs.type_id
    JOIN eve_groups eg on eg.id = et.eve_group_id
    JOIN eve_categories ect on ect.id = eg.eve_category_id
WHERE
    corporation_id = ?
`

type ListCorporationStructuresRow struct {
	CorporationStructure CorporationStructure
	EveSolarSystem       EveSolarSystem
	EveConstellation     EveConstellation
	EveRegion            EveRegion
	EveType              EveType
	EveGroup             EveGroup
	EveCategory          EveCategory
}

func (q *Queries) ListCorporationStructures(ctx context.Context, corporationID int64) ([]ListCorporationStructuresRow, error) {
	rows, err := q.db.QueryContext(ctx, listCorporationStructures, corporationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCorporationStructuresRow
	for rows.Next() {
		var i ListCorporationStructuresRow
		if err := rows.Scan(
			&i.CorporationStructure.ID,
			&i.CorporationStructure.CorporationID,
			&i.CorporationStructure.FuelExpires,
			&i.CorporationStructure.Name,
			&i.CorporationStructure.NextReinforceApply,
			&i.CorporationStructure.NextReinforceHour,
			&i.CorporationStructure.ProfileID,
			&i.CorporationStructure.ReinforceHour,
			&i.CorporationStructure.State,
			&i.CorporationStructure.StateTimerEnd,
			&i.CorporationStructure.StateTimerStart,
			&i.CorporationStructure.StructureID,
			&i.CorporationStructure.SystemID,
			&i.CorporationStructure.TypeID,
			&i.CorporationStructure.UnanchorsAt,
			&i.EveSolarSystem.ID,
			&i.EveSolarSystem.EveConstellationID,
			&i.EveSolarSystem.Name,
			&i.EveSolarSystem.SecurityStatus,
			&i.EveConstellation.ID,
			&i.EveConstellation.EveRegionID,
			&i.EveConstellation.Name,
			&i.EveRegion.ID,
			&i.EveRegion.Description,
			&i.EveRegion.Name,
			&i.EveType.ID,
			&i.EveType.EveGroupID,
			&i.EveType.Capacity,
			&i.EveType.Description,
			&i.EveType.GraphicID,
			&i.EveType.IconID,
			&i.EveType.IsPublished,
			&i.EveType.MarketGroupID,
			&i.EveType.Mass,
			&i.EveType.Name,
			&i.EveType.PackagedVolume,
			&i.EveType.PortionSize,
			&i.EveType.Radius,
			&i.EveType.Volume,
			&i.EveGroup.ID,
			&i.EveGroup.EveCategoryID,
			&i.EveGroup.Name,
			&i.EveGroup.IsPublished,
			&i.EveCategory.ID,
			&i.EveCategory.Name,
			&i.EveCategory.IsPublished,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateCorporationStructure = `-- name: UpdateOrCreateCorporationStructure :one
INSERT INTO
    corporation_structures (
        corporation_id,
        fuel_expires,
        name,
        next_reinforce_apply,
        next_reinforce_hour,
        profile_id,
        reinforce_hour,
        state,
        state_timer_end,
        state_timer_start,
        structure_id,
        system_id,
        type_id,
        unanchors_at
    )
VALUES
    (
        ?1,
        ?2,
        ?3,
        ?4,
        ?5,
        ?6,
        ?7,
        ?8,
        ?9,
        ?10,
        ?11,
        ?12,
        ?13,
        ?14
    )
ON CONFLICT (corporation_id, structure_id) DO UPDATE
SET
    fuel_expires = ?2,
    name = ?3,
    next_reinforce_apply = ?4,
    next_reinforce_hour = ?5,
    reinforce_hour = ?7,
    state = ?8,
    state_timer_end = ?9,
    state_timer_start = ?10,
    unanchors_at = ?14
    RETURNING id
`

type UpdateOrCreateCorporationStructureParams struct {
	CorporationID      int64
	FuelExpires        sql.NullTime
	Name               string
	NextReinforceApply sql.NullTime
	NextReinforceHour  sql.NullInt64
	ProfileID          int64
	ReinforceHour      sql.NullInt64
	State              string
	StateTimerEnd      sql.NullTime
	StateTimerStart    sql.NullTime
	StructureID        int64
	SystemID           int64
	TypeID             int64
	UnanchorsAt        sql.NullTime
}

func (q *Queries) UpdateOrCreateCorporationStructure(ctx context.Context, arg UpdateOrCreateCorporationStructureParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateOrCreateCorporationStructure,
		arg.CorporationID,
		arg.FuelExpires,
		arg.Name,
		arg.NextReinforceApply,
		arg.NextReinforceHour,
		arg.ProfileID,
		arg.ReinforceHour,
		arg.State,
		arg.StateTimerEnd,
		arg.StateTimerStart,
		arg.StructureID,
		arg.SystemID,
		arg.TypeID,
		arg.UnanchorsAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
