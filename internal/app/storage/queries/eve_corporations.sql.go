// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: eve_corporations.sql

package queries

import (
	"context"
	"database/sql"
)

const createEveCorporation = `-- name: CreateEveCorporation :exec
INSERT INTO eve_corporations (
    id,
    alliance_id,
    ceo_id,
    creator_id,
    date_founded,
    description,
    faction_id,
    home_station_id,
    member_count,
    name,
    shares,
    tax_rate,
    ticker,
    url,
    war_eligible
)
VALUES (
    ?, ?, ?, ?, ? ,?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateEveCorporationParams struct {
	ID            int64
	AllianceID    sql.NullInt64
	CeoID         sql.NullInt64
	CreatorID     sql.NullInt64
	DateFounded   sql.NullTime
	Description   string
	FactionID     sql.NullInt64
	HomeStationID sql.NullInt64
	MemberCount   int64
	Name          string
	Shares        sql.NullInt64
	TaxRate       float64
	Ticker        string
	Url           string
	WarEligible   bool
}

func (q *Queries) CreateEveCorporation(ctx context.Context, arg CreateEveCorporationParams) error {
	_, err := q.db.ExecContext(ctx, createEveCorporation,
		arg.ID,
		arg.AllianceID,
		arg.CeoID,
		arg.CreatorID,
		arg.DateFounded,
		arg.Description,
		arg.FactionID,
		arg.HomeStationID,
		arg.MemberCount,
		arg.Name,
		arg.Shares,
		arg.TaxRate,
		arg.Ticker,
		arg.Url,
		arg.WarEligible,
	)
	return err
}

const getEveCorporation = `-- name: GetEveCorporation :one
SELECT
    ec.id, ec.alliance_id, ec.ceo_id, ec.creator_id, ec.date_founded, ec.description, ec.faction_id, ec.home_station_id, ec.member_count, ec.name, ec.shares, ec.tax_rate, ec.ticker, ec.url, ec.war_eligible,
    eec.name as ceo_name,
    eec.category as ceo_category,
    eer.name as creator_name,
    eer.category as creator_category,
    eea.name as alliance_name,
    eea.category as alliance_category,
    eef.name as faction_name,
    eef.category as faction_category,
    eeh.name as station_name,
    eeh.category as station_category
FROM eve_corporations ec
LEFT JOIN eve_entities AS eec ON eec.id = ec.ceo_id
LEFT JOIN eve_entities AS eer ON eer.id = ec.creator_id
LEFT JOIN eve_entities as eea ON eea.id = ec.alliance_id
LEFT JOIN eve_entities as eef ON eef.id = ec.faction_id
LEFT JOIN eve_entities as eeh ON eeh.id = ec.home_station_id
WHERE ec.id = ?
`

type GetEveCorporationRow struct {
	EveCorporation   EveCorporation
	CeoName          sql.NullString
	CeoCategory      sql.NullString
	CreatorName      sql.NullString
	CreatorCategory  sql.NullString
	AllianceName     sql.NullString
	AllianceCategory sql.NullString
	FactionName      sql.NullString
	FactionCategory  sql.NullString
	StationName      sql.NullString
	StationCategory  sql.NullString
}

func (q *Queries) GetEveCorporation(ctx context.Context, id int64) (GetEveCorporationRow, error) {
	row := q.db.QueryRowContext(ctx, getEveCorporation, id)
	var i GetEveCorporationRow
	err := row.Scan(
		&i.EveCorporation.ID,
		&i.EveCorporation.AllianceID,
		&i.EveCorporation.CeoID,
		&i.EveCorporation.CreatorID,
		&i.EveCorporation.DateFounded,
		&i.EveCorporation.Description,
		&i.EveCorporation.FactionID,
		&i.EveCorporation.HomeStationID,
		&i.EveCorporation.MemberCount,
		&i.EveCorporation.Name,
		&i.EveCorporation.Shares,
		&i.EveCorporation.TaxRate,
		&i.EveCorporation.Ticker,
		&i.EveCorporation.Url,
		&i.EveCorporation.WarEligible,
		&i.CeoName,
		&i.CeoCategory,
		&i.CreatorName,
		&i.CreatorCategory,
		&i.AllianceName,
		&i.AllianceCategory,
		&i.FactionName,
		&i.FactionCategory,
		&i.StationName,
		&i.StationCategory,
	)
	return i, err
}
