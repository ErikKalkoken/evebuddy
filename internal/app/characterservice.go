// Code generated by ifacemaker; DO NOT EDIT.

package app

import (
	"context"
	"time"

	"fyne.io/fyne/v2/data/binding"
	"github.com/ErikKalkoken/evebuddy/internal/optional"
	"github.com/ErikKalkoken/evebuddy/internal/set"
)

// CharacterService ...
type CharacterService interface {
	ListAssetsInShipHangar(ctx context.Context, characterID int32, locationID int64) ([]*CharacterAsset, error)
	ListAssetsInItemHangar(ctx context.Context, characterID int32, locationID int64) ([]*CharacterAsset, error)
	ListAssetsInLocation(ctx context.Context, characterID int32, locationID int64) ([]*CharacterAsset, error)
	ListAssets(ctx context.Context, characterID int32) ([]*CharacterAsset, error)
	ListAllAssets(ctx context.Context) ([]*CharacterAsset, error)
	AssetTotalValue(ctx context.Context, characterID int32) (optional.Optional[float64], error)
	UpdateAssetTotalValue(ctx context.Context, characterID int32) (float64, error)
	GetAttributes(ctx context.Context, characterID int32) (*CharacterAttributes, error)
	DeleteCharacter(ctx context.Context, id int32) error
	// EnableTrainingWatcher enables training watcher for a character when it has an active training queue.
	EnableTrainingWatcher(ctx context.Context, characterID int32) error
	// EnableAllTrainingWatchers enables training watches for any currently active training queue.
	EnableAllTrainingWatchers(ctx context.Context) error
	// DisableAllTrainingWatchers disables training watches for all characters.
	DisableAllTrainingWatchers(ctx context.Context) error
	// GetCharacter returns a character from storage and updates calculated fields.
	GetCharacter(ctx context.Context, id int32) (*Character, error)
	GetAnyCharacter(ctx context.Context) (*Character, error)
	ListCharacters(ctx context.Context) ([]*Character, error)
	ListCharactersShort(ctx context.Context) ([]*CharacterShort, error)
	UpdateIsTrainingWatched(ctx context.Context, id int32, v bool) error
	// UpdateOrCreateCharacterFromSSO creates or updates a character via SSO authentication.
	// The provided context is used for the SSO authentication process only and can be canceled.
	UpdateOrCreateCharacterFromSSO(ctx context.Context, infoText binding.ExternalString) (int32, error)
	// AddEveEntitiesFromSearchESI runs a search on ESI and adds the results as new EveEntity objects to the database.
	// This method performs a character specific search and needs a token.
	AddEveEntitiesFromSearchESI(ctx context.Context, characterID int32, search string) ([]int32, error)
	CountContractBids(ctx context.Context, contractID int64) (int, error)
	GetContractTopBid(ctx context.Context, contractID int64) (*CharacterContractBid, error)
	NotifyUpdatedContracts(ctx context.Context, characterID int32, earliest time.Time, notify func(title, content string)) error
	ListAllContracts(ctx context.Context) ([]*CharacterContract, error)
	ListContractItems(ctx context.Context, contractID int64) ([]*CharacterContractItem, error)
	ListImplants(ctx context.Context, characterID int32) ([]*CharacterImplant, error)
	ListAllCharacterIndustryJob(ctx context.Context) ([]*CharacterIndustryJob, error)
	GetJumpClone(ctx context.Context, characterID, cloneID int32) (*CharacterJumpClone, error)
	ListAllJumpClones(ctx context.Context) ([]*CharacterJumpClone2, error)
	ListJumpClones(ctx context.Context, characterID int32) ([]*CharacterJumpClone, error)
	// DeleteMail deletes a mail both on ESI and in the database.
	DeleteMail(ctx context.Context, characterID, mailID int32) error
	GetMail(ctx context.Context, characterID int32, mailID int32) (*CharacterMail, error)
	GetAllMailUnreadCount(ctx context.Context) (int, error)
	// GetMailCounts returns the number of unread mail for a character.
	GetMailCounts(ctx context.Context, characterID int32) (int, int, error)
	GetMailLabelUnreadCounts(ctx context.Context, characterID int32) (map[int32]int, error)
	GetMailListUnreadCounts(ctx context.Context, characterID int32) (map[int32]int, error)
	NotifyMails(ctx context.Context, characterID int32, earliest time.Time, notify func(title, content string)) error
	ListMailLists(ctx context.Context, characterID int32) ([]*EveEntity, error)
	// ListMailsForLabel returns a character's mails for a label in descending order by timestamp.
	ListMailHeadersForLabelOrdered(ctx context.Context, characterID int32, labelID int32) ([]*CharacterMailHeader, error)
	ListMailHeadersForListOrdered(ctx context.Context, characterID int32, listID int32) ([]*CharacterMailHeader, error)
	ListMailLabelsOrdered(ctx context.Context, characterID int32) ([]*CharacterMailLabel, error)
	// SendMail creates a new mail on ESI and stores it locally.
	SendMail(ctx context.Context, characterID int32, subject string, recipients []*EveEntity, body string) (int32, error)
	// UpdateMailRead updates an existing mail as read
	UpdateMailRead(ctx context.Context, characterID, mailID int32) error
	CountNotifications(ctx context.Context, characterID int32) (map[NotificationGroup][]int, error)
	NotifyCommunications(ctx context.Context, characterID int32, earliest time.Time, typesEnabled set.Set[string], notify func(title, content string)) error
	ListNotificationsTypes(ctx context.Context, characterID int32, ng NotificationGroup) ([]*CharacterNotification, error)
	ListNotificationsAll(ctx context.Context, characterID int32) ([]*CharacterNotification, error)
	ListNotificationsUnread(ctx context.Context, characterID int32) ([]*CharacterNotification, error)
	NotifyExpiredExtractions(ctx context.Context, characterID int32, earliest time.Time, notify func(title, content string)) error
	ListAllPlanets(ctx context.Context) ([]*CharacterPlanet, error)
	ListPlanets(ctx context.Context, characterID int32) ([]*CharacterPlanet, error)
	// SearchESI performs a name search for items on the ESI server
	// and returns the results by EveEntity category and sorted by name.
	// It also returns the total number of results.
	// A total of 500 indicates that we exceeded the server limit.
	SearchESI(ctx context.Context, characterID int32, search string, categories []SearchCategory, strict bool) (map[SearchCategory][]*EveEntity, int, error)
	// UpdateSectionIfNeeded updates a section from ESI if has expired and changed
	// and reports back if it has changed
	UpdateSectionIfNeeded(ctx context.Context, arg CharacterUpdateSectionParams) (bool, error)
	ListShipsAbilities(ctx context.Context, characterID int32, search string) ([]*CharacterShipAbility, error)
	GetSkill(ctx context.Context, characterID, typeID int32) (*CharacterSkill, error)
	ListSkillProgress(ctx context.Context, characterID, eveGroupID int32) ([]ListSkillProgress, error)
	ListSkillGroupsProgress(ctx context.Context, characterID int32) ([]ListCharacterSkillGroupProgress, error)
	GetTotalTrainingTime(ctx context.Context, characterID int32) (optional.Optional[time.Duration], error)
	NotifyExpiredTraining(ctx context.Context, characterID int32, notify func(title, content string)) error
	ListSkillqueueItems(ctx context.Context, characterID int32) ([]*CharacterSkillqueueItem, error)
	// UpdateSkillqueueESI updates the skillqueue for a character from ESI
	// and reports wether it has changed.
	UpdateSkillqueueESI(ctx context.Context, arg CharacterUpdateSectionParams) (bool, error)
	// HasTokenWithScopes reports wether a token with the requested scopes exists for a character.
	HasTokenWithScopes(ctx context.Context, characterID int32) (bool, error)
	ListWalletJournalEntries(ctx context.Context, characterID int32) ([]*CharacterWalletJournalEntry, error)
	ListWalletTransactions(ctx context.Context, characterID int32) ([]*CharacterWalletTransaction, error)
}
