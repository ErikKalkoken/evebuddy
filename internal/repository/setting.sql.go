// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: setting.sql

package repository

import (
	"context"
)

const createSetting = `-- name: CreateSetting :exec
INSERT INTO settings (
    value,
    key
)
VALUES (?, ?)
`

type CreateSettingParams struct {
	Value []byte
	Key   string
}

func (q *Queries) CreateSetting(ctx context.Context, arg CreateSettingParams) error {
	_, err := q.db.ExecContext(ctx, createSetting, arg.Value, arg.Key)
	return err
}

const deleteSetting = `-- name: DeleteSetting :exec
DELETE FROM settings
WHERE key = ?
`

func (q *Queries) DeleteSetting(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteSetting, key)
	return err
}

const getSetting = `-- name: GetSetting :one
SELECT "key", value
FROM settings
WHERE key = ?
`

func (q *Queries) GetSetting(ctx context.Context, key string) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSetting, key)
	var i Setting
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const updateSetting = `-- name: UpdateSetting :exec
UPDATE settings
SET value = ?
WHERE key = ?
`

type UpdateSettingParams struct {
	Value []byte
	Key   string
}

func (q *Queries) UpdateSetting(ctx context.Context, arg UpdateSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateSetting, arg.Value, arg.Key)
	return err
}
