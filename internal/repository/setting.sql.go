// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: setting.sql

package repository

import (
	"context"
)

const deleteSetting = `-- name: DeleteSetting :exec
DELETE FROM settings
WHERE key = ?
`

func (q *Queries) DeleteSetting(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteSetting, key)
	return err
}

const getSetting = `-- name: GetSetting :one
SELECT "key", value
FROM settings
WHERE key = ?
`

func (q *Queries) GetSetting(ctx context.Context, key string) (Setting, error) {
	row := q.db.QueryRowContext(ctx, getSetting, key)
	var i Setting
	err := row.Scan(&i.Key, &i.Value)
	return i, err
}

const updateOrCreateSetting = `-- name: UpdateOrCreateSetting :exec
INSERT INTO settings (
    value,
    key
)
VALUES (?, ?)
ON CONFLICT (key) DO
UPDATE SET value = ?
`

type UpdateOrCreateSettingParams struct {
	Value []byte
	Key   string
}

func (q *Queries) UpdateOrCreateSetting(ctx context.Context, arg UpdateOrCreateSettingParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateSetting, arg.Value, arg.Key)
	return err
}
