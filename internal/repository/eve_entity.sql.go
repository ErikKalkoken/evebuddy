// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: eve_entity.sql

package repository

import (
	"context"
)

const createEveEntity = `-- name: CreateEveEntity :exec
INSERT INTO eve_entities (
    id,
    category,
    name
)
VALUES (
    ?, ?, ?
)
`

type CreateEveEntityParams struct {
	ID       int64
	Category string
	Name     string
}

func (q *Queries) CreateEveEntity(ctx context.Context, arg CreateEveEntityParams) error {
	_, err := q.db.ExecContext(ctx, createEveEntity, arg.ID, arg.Category, arg.Name)
	return err
}

const getEveEntity = `-- name: GetEveEntity :one
SELECT id, category, name
FROM eve_entities
WHERE id = ?
`

func (q *Queries) GetEveEntity(ctx context.Context, id int64) (EveEntity, error) {
	row := q.db.QueryRowContext(ctx, getEveEntity, id)
	var i EveEntity
	err := row.Scan(&i.ID, &i.Category, &i.Name)
	return i, err
}

const getEveEntityByNameAndCategory = `-- name: GetEveEntityByNameAndCategory :one
SELECT id, category, name
FROM eve_entities
WHERE name = ? AND category = ?
`

type GetEveEntityByNameAndCategoryParams struct {
	Name     string
	Category string
}

func (q *Queries) GetEveEntityByNameAndCategory(ctx context.Context, arg GetEveEntityByNameAndCategoryParams) (EveEntity, error) {
	row := q.db.QueryRowContext(ctx, getEveEntityByNameAndCategory, arg.Name, arg.Category)
	var i EveEntity
	err := row.Scan(&i.ID, &i.Category, &i.Name)
	return i, err
}

const listEveEntitiesByName = `-- name: ListEveEntitiesByName :many
SELECT id, category, name
FROM eve_entities
WHERE name = ?
`

func (q *Queries) ListEveEntitiesByName(ctx context.Context, name string) ([]EveEntity, error) {
	rows, err := q.db.QueryContext(ctx, listEveEntitiesByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EveEntity
	for rows.Next() {
		var i EveEntity
		if err := rows.Scan(&i.ID, &i.Category, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEveEntitiesByPartialName = `-- name: ListEveEntitiesByPartialName :many
SELECT id, category, name
FROM eve_entities
WHERE name LIKE ?
ORDER BY name
COLLATE NOCASE
`

func (q *Queries) ListEveEntitiesByPartialName(ctx context.Context, name string) ([]EveEntity, error) {
	rows, err := q.db.QueryContext(ctx, listEveEntitiesByPartialName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EveEntity
	for rows.Next() {
		var i EveEntity
		if err := rows.Scan(&i.ID, &i.Category, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEveEntityIDs = `-- name: ListEveEntityIDs :many
SELECT id
FROM eve_entities
`

func (q *Queries) ListEveEntityIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, listEveEntityIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrCreateEveEntity = `-- name: UpdateOrCreateEveEntity :exec
INSERT INTO eve_entities (
    category,
    name,
    id
)
VALUES (
    ?, ?, ?
)
ON CONFLICT (id) DO
UPDATE SET
    category = ?,
    name = ?
`

type UpdateOrCreateEveEntityParams struct {
	Category string
	Name     string
	ID       int64
}

func (q *Queries) UpdateOrCreateEveEntity(ctx context.Context, arg UpdateOrCreateEveEntityParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateEveEntity, arg.Category, arg.Name, arg.ID)
	return err
}
