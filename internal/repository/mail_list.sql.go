// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: mail_list.sql

package repository

import (
	"context"
)

const createMailList = `-- name: CreateMailList :exec
INSERT OR IGNORE INTO mail_lists (
    character_id,
    eve_entity_id
)
VALUES (
    ?, ?
)
`

type CreateMailListParams struct {
	CharacterID int64
	EveEntityID int64
}

func (q *Queries) CreateMailList(ctx context.Context, arg CreateMailListParams) error {
	_, err := q.db.ExecContext(ctx, createMailList, arg.CharacterID, arg.EveEntityID)
	return err
}

const getMailList = `-- name: GetMailList :one
SELECT character_id, eve_entity_id
FROM mail_lists
WHERE character_id = ? AND eve_entity_id = ?
`

type GetMailListParams struct {
	CharacterID int64
	EveEntityID int64
}

func (q *Queries) GetMailList(ctx context.Context, arg GetMailListParams) (MailList, error) {
	row := q.db.QueryRowContext(ctx, getMailList, arg.CharacterID, arg.EveEntityID)
	var i MailList
	err := row.Scan(&i.CharacterID, &i.EveEntityID)
	return i, err
}

const listMailLists = `-- name: ListMailLists :many
SELECT eve_entities.id, eve_entities.category, eve_entities.name
FROM mail_lists
JOIN eve_entities ON eve_entities.id = mail_lists.eve_entity_id
WHERE character_id = ?
ORDER by eve_entities.name
`

func (q *Queries) ListMailLists(ctx context.Context, characterID int64) ([]EveEntity, error) {
	rows, err := q.db.QueryContext(ctx, listMailLists, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EveEntity
	for rows.Next() {
		var i EveEntity
		if err := rows.Scan(&i.ID, &i.Category, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
