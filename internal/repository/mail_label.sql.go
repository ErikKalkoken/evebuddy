// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: mail_label.sql

package repository

import (
	"context"
	"strings"
)

const createMailLabel = `-- name: CreateMailLabel :exec
INSERT INTO mail_labels (
    color,
    name,
    unread_count,
    character_id,
    label_id
)
VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateMailLabelParams struct {
	Color       string
	Name        string
	UnreadCount int64
	CharacterID int64
	LabelID     int64
}

func (q *Queries) CreateMailLabel(ctx context.Context, arg CreateMailLabelParams) error {
	_, err := q.db.ExecContext(ctx, createMailLabel,
		arg.Color,
		arg.Name,
		arg.UnreadCount,
		arg.CharacterID,
		arg.LabelID,
	)
	return err
}

const getMailLabel = `-- name: GetMailLabel :one
SELECT id, character_id, color, label_id, name, unread_count
FROM mail_labels
WHERE character_id = ? AND label_id = ?
`

type GetMailLabelParams struct {
	CharacterID int64
	LabelID     int64
}

func (q *Queries) GetMailLabel(ctx context.Context, arg GetMailLabelParams) (MailLabel, error) {
	row := q.db.QueryRowContext(ctx, getMailLabel, arg.CharacterID, arg.LabelID)
	var i MailLabel
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.Color,
		&i.LabelID,
		&i.Name,
		&i.UnreadCount,
	)
	return i, err
}

const listMailLabels = `-- name: ListMailLabels :many
SELECT id, character_id, color, label_id, name, unread_count
FROM mail_labels
WHERE character_id = ?
AND label_id > 8
ORDER BY name
`

func (q *Queries) ListMailLabels(ctx context.Context, characterID int64) ([]MailLabel, error) {
	rows, err := q.db.QueryContext(ctx, listMailLabels, characterID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MailLabel
	for rows.Next() {
		var i MailLabel
		if err := rows.Scan(
			&i.ID,
			&i.CharacterID,
			&i.Color,
			&i.LabelID,
			&i.Name,
			&i.UnreadCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMailLabelsByIDs = `-- name: ListMailLabelsByIDs :many
SELECT id, character_id, color, label_id, name, unread_count
FROM mail_labels
WHERE character_id = ? AND label_id IN (/*SLICE:ids*/?)
`

type ListMailLabelsByIDsParams struct {
	CharacterID int64
	Ids         []int64
}

func (q *Queries) ListMailLabelsByIDs(ctx context.Context, arg ListMailLabelsByIDsParams) ([]MailLabel, error) {
	query := listMailLabelsByIDs
	var queryParams []interface{}
	queryParams = append(queryParams, arg.CharacterID)
	if len(arg.Ids) > 0 {
		for _, v := range arg.Ids {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:ids*/?", strings.Repeat(",?", len(arg.Ids))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:ids*/?", "NULL", 1)
	}
	rows, err := q.db.QueryContext(ctx, query, queryParams...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MailLabel
	for rows.Next() {
		var i MailLabel
		if err := rows.Scan(
			&i.ID,
			&i.CharacterID,
			&i.Color,
			&i.LabelID,
			&i.Name,
			&i.UnreadCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMailLabel = `-- name: UpdateMailLabel :exec
UPDATE mail_labels
SET
    color = ?,
    name = ?,
    unread_count = ?
WHERE character_id = ?
AND label_id = ?
`

type UpdateMailLabelParams struct {
	Color       string
	Name        string
	UnreadCount int64
	CharacterID int64
	LabelID     int64
}

func (q *Queries) UpdateMailLabel(ctx context.Context, arg UpdateMailLabelParams) error {
	_, err := q.db.ExecContext(ctx, updateMailLabel,
		arg.Color,
		arg.Name,
		arg.UnreadCount,
		arg.CharacterID,
		arg.LabelID,
	)
	return err
}
