// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: token.sql

package repository

import (
	"context"
	"time"
)

const getToken = `-- name: GetToken :one
SELECT access_token, character_id, expires_at, refresh_token, token_type
FROM tokens
WHERE character_id = ?
`

func (q *Queries) GetToken(ctx context.Context, characterID int64) (Token, error) {
	row := q.db.QueryRowContext(ctx, getToken, characterID)
	var i Token
	err := row.Scan(
		&i.AccessToken,
		&i.CharacterID,
		&i.ExpiresAt,
		&i.RefreshToken,
		&i.TokenType,
	)
	return i, err
}

const updateOrCreateToken = `-- name: UpdateOrCreateToken :exec
INSERT INTO tokens (
    access_token,
    expires_at,
    refresh_token,
    token_type,
    character_id
)
VALUES (
    ?, ?, ?, ?, ?
)
ON CONFLICT (character_id) DO
UPDATE SET
    access_token = ?,
    expires_at = ?,
    refresh_token = ?,
    token_type = ?
`

type UpdateOrCreateTokenParams struct {
	AccessToken  string
	ExpiresAt    time.Time
	RefreshToken string
	TokenType    string
	CharacterID  int64
}

func (q *Queries) UpdateOrCreateToken(ctx context.Context, arg UpdateOrCreateTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateOrCreateToken,
		arg.AccessToken,
		arg.ExpiresAt,
		arg.RefreshToken,
		arg.TokenType,
		arg.CharacterID,
	)
	return err
}
